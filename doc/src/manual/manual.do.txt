TITLE: Doconce Description
AUTHOR: Hans Petter Langtangen at Center for Biomedical Computing, Simula Research Laboratory & Department of Informatics, University of Oslo
DATE: today


# lines beginning with # are doconce comment lines
# (documents can also have mako comment lines)


======= What Is Doconce? =======
label{what:is:doconce}
idx{doconce!short explanation}

# #include "../tutorial/_what_is.do.txt"

# #include "install.do.txt"

#
# Here are some comment lines that do not affect any formatting
# these lines are converted to comments in the output format.
# This may have some side effects, especially in rst and sphinx
# where lines following the comment may be taken as part of
# the comment if there are no blank lines after the comment.
#
# One can use ## and the mako preprocessor to remove comments
# *before* doconce sees the text. That can be useful when
# doconce comments interferes with formatting.
# The mako tool also supports <%doc> .. </%doc>
#


===== Demos =====

idx{demos}

The current text is generated from a Doconce format stored in the
directory
!bc sys
doc/manual/manual.do.txt
!ec
file in the Doconce source code tree. Here you can run a
`make.sh` script to generate a lot of different
formats: HTML, LaTeX, plain text, etc., stored in the subdirectory `demo`.

Another demo is found in
!bc sys
doc/tutorial/tutorial.do.txt
!ec
In the `tutorial` directory there is also a `make.sh` file producing a
lot of formats in the subdirectory `demo`.

# Example on including another Doconce file:

# #include "../tutorial/doconce2anything.do.txt"



======= The Doconce Markup Language =======

The Doconce format introduces four constructs to markup text:
lists, special lines, inline tags, and environments.

===== Lists =====

An unordered bullet list makes use of the `*` as bullet sign
and is indented as follows

!bc
   * item 1

   * item 2

     * subitem 1, if there are more
       lines, each line must
       be intended as shown here

     * subitem 2,
       also spans two lines

   * item 3
!ec

This list gets typeset as

   * item 1

   * item 2

     * subitem 1, if there are more
       lines, each line must
       be intended as shown here

     * subitem 2,
       also spans two lines

   * item 3

# #if FORMAT == "gwiki"
(As seen, nested lists in (g)wiki format are not treated well by
Doconce. Plain unnested lists work fine. And the (g)wiki format
automatically puts multiple lines of an item on a single line as
required :-)
# #endif

In an ordered list, each item starts with an `o` (as the first letter
in "ordered"):

!bc
   o item 1
   o item 2
     * subitem 1
     * subitem 2
   o item 3
!ec

resulting in

   o item 1
   o item 2
     * subitem 1
     * subitem 2
   o item 3

# #if FORMAT == "gwiki"
(Again, there are problems with mixing nested lists and liststypes
for the (g)wiki format.)
# #endif

Ordered lists cannot have an ordered sublist, i.e., the ordering
applies to the outer list only.

In a description list, each item is recognized by a dash followed
by a keyword followed by a colon:

!bc
   - keyword1: explanation of keyword1

   - keyword2: explanation
     of keyword2 (remember to indent properly
     if there are multiple
     lines)
!ec

The result becomes

   - keyword1: explanation of keyword1

   - keyword2: explanation
     of keyword2 (remember to indent properly
     if there are multiple
     lines)


===== Special lines =====

The Doconce markup language has a concept called *special lines*.
Such lines starts with a markup at the very beginning of the
line and are used to mark document title, authors, date,
sections, subsections, paragraphs, figures, movies, etc.


===== Heading with title and author(s) =====

idx{`TITLE` keyword} idx{`AUTHOR` keyword} idx{`DATE` keyword}

Lines starting with `TITLE:`, `AUTHOR:`, and `DATE:` are optional and used
to identify a title of the document, the authors, and the date. The
title is treated as the rest of the line, so is the date, but the
author text consists of the name and associated institution(s) with
the syntax
!bc
name at institution1 and institution2 and institution3
!ec
The `at` with surrounding spaces
is essential for adding information about institution(s)
to the author name, and the `and` with surrounding spaces is
essential as delimiter between different institutions.
An email address can optionally be included, using the syntax
!bc
name Email: somename@site.net at institution1 and institution2
!ec
Multiple authors require multiple `AUTHOR:` lines. All information
associated with `TITLE:` and `AUTHOR:` keywords must appear on a single
line.  Here is an example:
!bc
TITLE: On an Ultimate Markup Language
AUTHOR: H. P. Langtangen at Center for Biomedical Computing, Simula Research Laboratory & Dept. of Informatics, Univ. of Oslo
AUTHOR: Kaare Dump Email: dump@cyb.space.com at Segfault, Cyberspace Inc.
AUTHOR: A. Dummy Author
DATE: November 9, 2016
!ec
Note how one can specify a single institution, multiple institutions
(with `&` as separator between institutions),
and no institution. In some formats (including `rst` and `sphinx`)
only the author names appear. Some formats have
"intelligence" in listing authors and institutions, e.g., the plain text
format:
!bc
Hans Petter Langtangen [1, 2]
Kaare Dump  (dump@cyb.space.com) [3]
A. Dummy Author

[1] Center for Biomedical Computing, Simula Research Laboratory
[2] Department of Informatics, University of Oslo
[3] Segfault, Cyberspace Inc.
!ec
Similar typesetting is done for LaTeX and HTML formats.

The current date can be specified as `today`.

idx{`TOC` keyword}

===== Table of contents =====
A table of contents can be generated by the line
!bc
TOC: on
!ec
This line is usually placed after the `DATE:` line.
The value `off` turns off the table of contents.


===== Section headings =====
idx{headlines} idx{section headings}

Section headings are recognized by being surrounded by equal signs (=) or
underscores before and after the text of the headline. Different
section levels are recognized by the associated number of underscores
or equal signs (=):

   * 9 `=` characters for chapters
   * 7 for sections
   * 5 for subsections
   * 3 for subsubsections
   * 2 *underscrores* (only! - it looks best) for paragraphs
     (paragraph heading will be inlined)

Headings can be surrounded by as many blanks as desired.

Doconce also supports abstracts. This is typeset as a paragraph, but
*must* be followed by a section heading (everything up to the first
section heading is taken as part of the text of the abstract).


Here are some examples:

!bc
__Abstract.__ The following text just attempts to exemplify
various section headings.

Appendix is supported too: just let the heading start with "Appendix: "
(this affects only `latex` output, where the appendix formatting
is used - all other formats just leave the heading as it is written).

======= Example on a Section Heading =======

The running text goes here.


===== Example on a Subsection Heading =====

The running text goes here.

=== Example on a Subsubsection Heading ===

The running text goes here.

__A Paragraph.__ The running text goes here.
!ec

===== Figures =====

# Note: need extra blank after FIGURE and MOVIE in !bc environments
# because doconce treats !ec as part of the caption and moves the
# !ec up to the caption line

Figures are recognized by the special line syntax
!bc
FIGURE:[filename, height=400 width=600 frac=0.8] caption

!ec
The filename can be without extension, and Doconce will search for an
appropriate file with the right extension. If the extension is wrong,
say `.eps` when requesting an HTML format, Doconce tries to find another
file, and if not, the given file is converted to a proper format
(using ImageMagick's `convert` utility).

The height, width, and frac keywords can be included
if desired and may have effect for some formats: the height and width
are used for output in the formats `html`, `rst`, `sphinx`, while
the frac specification is used for `latex` and `pdflatex` to specify
the width of the image as a fraction of the text width.

The figure caption is optional. If omitted, the figure appears "inline"
in the text without any figure environment in LaTeX formats or HTML.
The caption may contain a label for referencing the figure.

!bwarning
Note the comma
between the filename and the figure size specifications and
that there should be no space around the = sign. This syntax must
be strictly followed.

Note also that, like for `TITLE:` and `AUTHOR:` lines, all information
related to a figure line *must be written on the same line*. Introducing
newlines in a long caption will destroy the formatting (only the
part of the caption appearing on the same line as `FIGURE:` will be
included in the formatted caption).
!ewarning

FIGURE:[fig/wave1D, width=400] A wave. label{fig:viz}

Combining several image files into one, in a table fashion, can be done by the
`montage` program from the ImageMagick suite:
!bc sys
montage -background white -geometry 100% -tile 2x \
        file1.png file2.png ... file4.png result.png
!ec
The option `-tile XxY` gives `X` figures in the horizontal direction and
`Y` in the vertical direction (`tile 2x` means two figures per row
and `-tile x2` means two rows).

The `montage` program is only appropriate for bitmap images (PNG, JPEG, GIF,
TIFF). Images in the PDF format should be mounted together
using `pdftk` (to combine images to one file),
`pdfnup` (to align them in tabular format), and `pdfcrop` (to
remove surrounding whitespace):

!bc sys
Terminal> pdftk file1.pdf file2.pdf ... file4.pdf output tmp.pdf
Terminal> pdfnup --nup 2x2 tmp.pdf        # output in tmp-nup.pdf
Terminal> pdfcrop tmp-nup.pdf result.png  # output in FE1.png
!ec


===== Movies =====

Movies/videos are inserted using the `MOVIE:` keyword. This
feature works well for the `latex`, `html`, `rst`, and `sphinx` formats.
Other formats try to generate some HTML file and link to that file
for showing the movie.

=== The Basic Command ===

As with `FIGURE`, the `MOVIE` command expands just *one line* and is of
the form

!bc
MOVIE: [filename, height=xxx width=yyy] possible caption
!ec

Note that there must be a blank line after every `MOVIE:` command.
The width and height parameters are not required, but leaving them out
may lead to movie sizes you do not want.

Here is a movie in the MPEG format:

MOVIE: [mov/wave.mpeg, width=600 height=470]

And here is a movie in the Ogg format:

MOVIE: [mov/wave.ogg, width=600] A movie in Ogg format.

A URL works too as movie address:

MOVIE: [http://hplgit.github.io/animate/doc/pub/mov-animate/demo.ogg] Ogg movie in cyberspace.


=== MP4, WebM, and Ogg Movies in HTML ===

If a movie is in Ogg, MP4, or WebM format, and the output format is HTML,
Doconce will check if the movie file is also in the other formats among
Ogg, MP4, and WebM, and include these as well such that the movie has
backup formats in case the browser does not support a particular format.
Providing a movie in Ogg, MP4, *and* WebM format is therefore the safest
way to ensure that the movie can be played in any browser on any device.

!bnotice
If you specify a movie in Ogg or WebM format and it also exists in
MP4 format, the MP4 format will be loaded first. To avoid having
alternative movie formats in HTML, use the `--no_mp4_webm_ogg_alternatives`
command-line option when running `doconce format`.
!enotice

=== Movie Handling in Various Formats ===

Movies are easiest shown in the HTML format.
The reST and Sphinx formats apply the same raw HTML code as the
HTML format and therefore have the same capabilities.
The LaTeX format results in a `.p.tex` file that have three
methods for showing movies, set by the option `-DMOVIE=...` to
`ptex2tex` or `doconce ptex2tex`. The values of `MOVIE` are

 o `media9`:
   the `media9` package is used for Flash and MP4 movies, `movie15`
   for MPEG and AVI files, and a simple `\href{run:file}{link}` command
   for other formats. Only Acrobat Reader supports displaying these
   type of movies.
 o `multimedia`: the `\movie` command (known from LaTeX Beamer) is used
   for movies.
 o `href`: the `\href{run:file}{link}` is used for all movies (default).

For all other formats, an HTML file that acts as a movie player is
generated and linked from the output document. This movie player
has essentially the same code as the HTML format would have, except
that the `video` tag is not used, only the `embed` tag. Some wiki
types do have support for videos, e.g., Wikipedia can work with
Ogg files, but Doconce has not yet implemented robust schemes for
anything but LaTeX, HTML, and Sphinx output.

=== YouTube and Vimeo Movies ===

Many publish their scientific movies on YouTube or Vimeo, and Doconce recognizes
YouTube and Vimeo URLs as movies. When the output from Doconce
is an HTML file, the movie will
be embedded, otherwise a URL to the YouTube or Vimeo page is inserted.
You should equip the `MOVIE:` command with the right width and height
of *embedded* YouTube and Vimeo movies. The recipe goes as follows:

 o click on *Share* (and on YouTube then *Embed*)
 o note the height and width of the embedded movie

A typical `MOVIE` command with a YouTube movie is then

!bc
MOVIE: [http://www.youtube.com/watch?v=sI2uCHH3qIM, width=420 height=315]

MOVIE: [http://vimeo.com/55562330, width=500 height=278] CFD.
!ec

=== Animation Based on Filename Generators ===

It is possible to define a movie from a set of files, usually plot files,
which can be shown in sequence to create an animation.
If the files are local on the computer, one can specify them by a
simple Unix wildcard notation, as in

!bc
MOVIE: [../experiments/frame_*.png]
!ec
Output in the HTML, reST, and Sphinx formats will make use of inline
JavaScript code to show the frames in sequence.
LaTeX employs the `animate` package for the same purpose.
Other formats generates a file (`movie_playerX.py`, where `X` is a number)
containing the HTML code with JavaScript to show and control the animation.
The Doconce document has a link to this movie viewer.

There is an alternative syntax to the Unix wildcard notation:

!bc
MOVIE: [../experiments/frame_%04d.png:0->320]
!ec
The filename is specified via printf syntax (typically the same
syntax as used to generate the individual frame files). The postfix
`:0->320` specifies the lower and upper limit of the counter
that is used in the printf specification `%04d`.
This latter syntax must be used if the plot files reside on some
web server, e.g.,

!bc
MOVIE: [http://some.where.net/experiments/frame_%04d.png:0->320]
!ec

Here is an example:

MOVIE: [http://hplgit.github.io/animate/doc/pub/mov-animate/frames/frame_%04d.png:0->320]

!bnotice Recommendations
It is challenging to write robust Doconce code with movies.
The recommended formats in HTML are MP4, WebM, and Ogg. One should
preferably make all three. These also works in reST and Sphinx.

The filename generation works very well in LaTeX, while true movie formats
pose big challenges. On Linux systems, the `media9`
does not work well because a proper Flash player for embedding in
the PDF file is not always available. The `movie15` package also leads
to problems because Acrobat Reader depends on an external player to
show the files, and the correct plugins to launch players with support
for a given format are not trivial to install. Even the plain `href{run:file}`
command relies on an external player and not all formats will be
supported on a given computer.

To have really robust code, use filename generators and not movie files.

!bc
MOVIE: [../experiments/frame_*.png]
!ec

One can, of course, write flexible Doconce code and decide at run time
if HTML output should have movie files or filename generators.
A relevant snippet using Mako is

!bc
% FORMAT in ("latex", "pdflatex") or HTMLMOVIE == "files":
MOVIE: [../experiments/frame_*.png]

% else:
MOVIE: [../experiments/movie.ogg]

% endif
!ec
With the `-DHTMLMOVIE=files` flag, animation of individual files will
be performed, while any other value than `files` leads to
use of the `movie.ogg` in all but LaTeX formats. In HTML one will try
to load `movie.mp4` (if it exists) and then `movie.webm` (if it exists)
and then finally `movie.ogg`.

There is no way to control the number of frames per second in
LaTeX animations based on filename generators such as `myframes*.png`.
However, with a little auto editing in a script one can control
the frame rates of the various movies. The rate is specified as `2`
in lines on the form

!bc
\begin{animateinline}[controls,loop]{2} % frames: f000.png -> f098.png
!ec
Setting the rate to 12 in for this particular movie based on the
`f%03.png` files, the following `doconce subst` command does the job
in a script:

!bc
doconce subst ',loop]{2}( .+: f000)' ',loop{12}\g<1>' mydoc.do.txt
!ec

!enotice

===== Copying Computer Code from Source Files =====

Another type of special lines starts with `@@@CODE` and enables copying
of computer code from a file directly into a verbatim environment, see
Section ref{sec:verbatim:blocks} below.

===== Inserting the Output from Operating System Commands =====

When Doconce is used to document computer program and results from
computer code it is important to ensure that the document contains
the latest version of the code and the corresponding output.
The former is handled by the `@@@CODE` directive, while the latter
has its own directive `@@@OSCMD`. The syntax reads

!bc
@@@OSCMD cmd
!ec
where `cmd` is any text that can be run in the operating system.
The output is copied into the Doconce source. For example,

!bc
@@@OSCMD python -c 'print "Hello,\nWorld!"'
!ec
results in

!bc sys
Terminal> python -c 'print "Hello,\nWorld!"'
Hello,
World!
!ec

There is a command-line option `--os_prompt=` that can be used to
set the (terminal) prompt that prefixes the command:

 * `--os_prompt=None` results in no prompt, just the command.
 * `--os_prompt=nocmd` results in no prompt and no command, just the output.
 * `--os_prompt=Terminal>` is the default setting (as in the example above).

===== Inline Tagging =====
label{inline:tagging}
idx{inline tagging} idx{emphasized words} idx{boldface words} idx{verbatim text}
idx{inline comments}

Doconce supports tags for *emphasized phrases*, _boldface phrases_,
and `verbatim text` (also called type writer text, for inline code),
color{blue}{colored words},
plus LaTeX/TeX inline mathematics, such as $\nu = \sin(x)$|$v = sin(x)$.

=== Emphasized Words ===

Emphasized text is typeset inside a pair of asterisk, and there should
be no spaces between an asterisk and the emphasized text, as in
!bc
*emphasized words*
!ec

Boldface font is recognized by an underscore instead of an asterisk:
!bc
_several words in boldface_ followed by *ephasized text*.
!ec
The line above gets typeset as
_several words in boldface_ followed by *ephasized text*.

=== Inline Verbatim Text ===

Verbatim text, typically used for short inline code,
is typeset between back-ticks:
!bc
`call myroutine(a, b)` looks like a Fortran call
while `void myfunc(double *a, double *b)` must be C.
!ec
The typesetting result looks like this:
`call myroutine(a, b)` looks like a Fortran call
while `void myfunc(double *a, double *b)` must be C.

It is recommended to have inline verbatim text on the same line in
the Doconce file, because some formats (LaTeX and `ptex2tex`) will have
problems with inline verbatim text that is split over two lines.

!bnotice
Watch out for mixing back-ticks and asterisk (i.e., verbatim and
emphasized code): the Doconce interpreter is not very smart so inline
computer code can soon lead to problems in the final format. Go back to the
Doconce source and modify it so the format to which you want to go
becomes correct (sometimes a trial and error process - sticking to
very simple formatting usually avoids such problems).
!enotice

=== Links to Web Addresses ===

Web addresses with links are typeset as
!bc
some URL like "Search Google": "http://google.com".
!ec
which appears as some URL like "Search Google": "http://google.com".
The space after colon is optional, but it is important to enclose the
link and the URL in double quotes.

To have the URL address itself as link text, put an "URL" or URL
before the address enclosed in double quotes:
!bc
Click on this link: URL: "https://github.com/hplgit/doconce".
!ec
which gets rendered as
Click on this link: URL: "https://github.com/hplgit/doconce".

(There is also support for lazy writing of URLs: any http or https web address
with a leading space and a trailing space, comma, semi-colon, or question
mark (but not period!) becomes a link with the web address as link text.)

=== Mail Addresses ===

Links that launches a mail to a specified address is written as
ordinary URLs, typically as

!bc
Send "mail": "mailto:hpl@simula.no"
# Alternative:
to "`hpl@simula.no`": "mailto:hpl@simula.no".
!ec
which appears as Send "mail": "mailto:hpl@simula.no" to
"`hpl@simula.no`": "mailto:hpl@simula.no".

=== Links to Local Files ===

Links to files ending in `.txt`, `.html`, `.pdf`, `.py`, `.f`,
`.f77`, `.f90`, `.f95`, `.sh`, `.csh`, `.ksh`, `.zsh`,
`.c`, `.cpp`, `.cxx`, `.pl`, and `.java` follows the same
setup:
!bc
see the "Doconce Manual": "manual.do.txt".
!ec
which appears as see the "Doconce Manual": "manual.do.txt".
However, linking to local files like this needs caution:

  * In the `html` format the links work well if the files are
    supplied with the `.html` with the same relative location.
  * In the `latex` and `pdflatex` formats, such links in PDF files
    will unless the `.tex` file has a full URL specified through
    a `\hyperbaseurl` command and the linked files are located correctly
    relative to this URL. Otherwise full URL must be used in links.
  * In the `sphinx` format, links to local files do not work unless the
    files reside in a `_static` directory (a warning is issued about this).

As a consequence, we strongly recommend that one copies the relevant
files to a `_static` or `_static-name` directory and makes links to
files in this directory only (`name` is the nickname of the Doconce
document, usually the name of the parent directory or main document).
Other links to files should use the full URL. If Doconce is used
for HTML output only, then plain links to local files work fine.

If you want a link to a local source code file and have it
viewed in the browser rather than being downloaded, we recommend
to transform the source code file to HTML format by running
`pygmentize`, e.g.,
!bc sys
Terminal> pygmentize -l bash -f html -O full,style=emacs \
          -o _static/make.sh.html subdir/make.sh
!ec
Then you can link to `_static/make.sh.html` instead of
`subdir/make.sh`. Here is an example where the reader
has the file available as `src/myprog.py` in her
software and the document links to `_static/myprog.py`:
!bc
See the code URL:"src/myprog.py" ("view: "_static/myprog.py.html").
!ec

Links to files with other extensions are typeset with
*the filename as link text*. The syntax consists of
the keyword URL, followed by a colon, and then the filename enclosed
in double quotes:
!bc
URL: "manual.html"
!ec
resulting in the link URL: "manual.html".

# This is now automatically carried out by the autogenerated
# script for sphinx:
#For such local links to
#work with the `sphinx` format, the `.rst` file needs a fix, carried
#out by
#!bc sys
#doconce sphinxfix_localURLs mydoc.rst
#!ec
#(The files, such as `manual.html`, are then copied to a subdirectory
#`_static`, which must be manually copied to the Sphinx directory's
#`_static` directory - links in the `.rst` files are automatically
#adjusted.)

=== Inline Comments ===

Doconce also supports inline comments in the text:
!bc
[name: comment]
!ec
where `name` is the name of the author of the command, and `comment` is a
plain text text. Note that there must be a space after the colon,
otherwise the comment is not recognized. [hpl: Inline comments
can span
several lines,
if desired.]

The name and comment are visible in the output unless `doconce format`
is run with a command-line argument `--skip_inline_comments`
(see Section ref{doconce2formats} for an example). Inline comments
are helpful during development of a document since different authors
and readers can comment on formulations, missing points, etc.
All such comments can easily be removed from the `.do.txt` file
(see Section ref{doconce2formats}).

Inline comments are typeset in a simple way (boldface name and the
comment in parenthesis), but in LaTeX very visible color boxes
are used (via the `todonotes` package).

=== Forced Line Breaks ===

By ending a line with `<linebreak>` the output format has a forced
linebreak at this point. This can be used to typeset poems,
songs (if not in a verbatim block), or the origin of quotes.
Here is an example:

!bc
|bquote
*Program writing is substantially more demanding than book
writing. Why is it so? I think the main reason is that a larger
attention span is needed when working on a large computer program
than when doing other intellectual tasks.* <linebreak>
Donald Knuth cite[p. 18]{Knuth85}, computer scientist, 1938-.
|equote
!ec
is rendered as

!bquote
*Program writing is substantially more demanding than book
writing. Why is it so? I think the main reason is that a larger
attention span is needed when working on a large computer program
than when doing other intellectual tasks.* <linebreak>
Donald Knuth cite[p. 18]{Knuth85}, computer scientist, 1938-.
!equote


=== Inline Mathematics ===

Inline mathematics is written as in LaTeX, i.e., inside dollar signs.
Many formats leave this syntax as it is (including to dollar signs),
hence nice math formatting is only obtained in LaTeX, HTML, MediaWiki,
and Sphinx (Epytext has some inline math support that is utilized).
However, mathematical expressions in LaTeX syntax often contains
special formatting commands, which may appear annoying in plain
text. Doconce therefore supports an extended inline math syntax where
the writer can provide an alternative syntax suited for formats close
to plain ASCII:

!bc
Here is an example on a linear system
${\bf A}{\bf x} = {\bf b}$|$Ax=b$,
where $\bf A$|$A$ is an $n\times n$|$nxn$ matrix, and
$\bf x$|$x$ and $\bf b$|$b$ are vectors of length $n$|$n$.
!ec
That is, we provide two alternative expressions, both enclosed in
dollar signs and separated by a pipe symbol, the expression to the
left is used in formats with LaTeX support (`latex`, `pdflatex`, `html`,
`sphinx`, `mwiki`), while the expression to the right is used for
all other formats.  The above text is typeset as "Here is an example
on a linear system ${\bf A}{\bf x} = {\bf b}$|$Ax=b$, where $\bf A$|$A$
is an $n\times n$|$nxn$ matrix, and $\bf x$|$x$ and $\bf b$|$b$
are vectors of length $n$|$n$."

===== Comments =====

Comments intended to be (sometimes) visible in the output document and
read by readers are known as *inline comments* in Doconce and
described in Section ref{inline:tagging}.

Here we address comments in the Doconce source file that are not
intended to be visible in the output document. Basic comment
lines start with the hash `#`:
!bc
#
# Here are some comment lines that do not affect any formatting.
# These lines are converted to comments in the output format.
#
!ec
Such comment lines may have some side effects in the `rst` and `sphinx`
formats because following lines are taken as part of the comment if
there is not a blank line after the comment.

The Mako preprocessor supports comments that are filtered out *before*
Doconce starts translating the document. Such comments are very valuable
as they will never interfere with the output format and they are only
present in the Doconce source. Mako has two types of comments:
lines starting with a double hash `##` and lines enclosed by
the `<%doc>` (beginning) and `<%doc/>` (closing) tags.

If you need a lot of comments in the Doconce file, consider using
Mako comments instead of the single hash, unless you want the
comments to be in the source code of the output document.

To comment out or remove large sections, consider using the Preprocess
preprocessor and an if-else block with a variable that is undefined
(typically something like a test `# #ifdef EXTRA` in Preprocess).


===== Cross-Referencing =====
idx{cross referencing} idx{labels} idx{references}

References and labels are supported. The syntax is simple:
!bc
label{section:verbatim}   # defines a label
For more information we refer to Section ref{section:verbatim}.
!ec
This syntax is close that that of labels and cross-references in
LaTeX. When the label is placed after a section or subsection heading,
the plain text, Epytext, and StructuredText formats will simply
replace the reference by the title of the (sub)section.  All labels
will become invisible, except those in math environments.  In the
`rst` and `sphinx` formats, the end effect is the same, but
the "label" and "ref" commands are first translated to the proper
reST commands by `doconce format`. In the HTML and (Google
Code) wiki formats, labels become anchors and references become links,
and with LaTeX "label" and "ref" are just equipped with backslashes so
these commands work as usual in LaTeX.

It is, in general, recommended to use labels and references for
(sub)sections, equations, and figures only.
By the way, here is an example on referencing Figure ref{fig:viz}
(the label appears in the figure caption in the source code of this document).
Additional references to Sections ref{mathtext} and ref{newcommands} are
nice to demonstrate, as well as a reference to equations,
say (ref{myeq1})-(ref{myeq2}). A comparison of the output and
the source of this document illustrates how labels and references
are handled by the format in question.

Hyperlinks to files or web addresses are handled as explained
in Section ref{inline:tagging}.

===== Generalized Cross-Referencing =====
label{manual:genrefs}

Sometimes a series of individual documents may be assembled to one
large document, typically a book.
In the book one wants to make cross references between chapters
and sections, while these become references to external documents
when the chapters (or sections) are compiled as stand-alone
documents. For example, one can in a Doconce file `file1.do.txt`
have text like

!bc
...as shown in Section ref{sec:eqs}.
!ec
with `label{sec:eqs}` defined in another file `file2.do.txt`.
If `file1.do.txt` and `file2.do.txt` are combined to a single
document, the reference is treated correctly, but if `file1.do.txt`
is compiled as a single document, the label `sec:eqs` becomes
undefined. Then one would instead write

!bc
...as shown in the document "Mathematical Equations":
"http://some.net/doc/matheqs.html" cite{math_eqs_2020}.
!ec
However, LaTeX has functionality for referring to labels
in external documents: these work fine when the `xr` package
is used and the external documents are listed as
`externaldocument{name}`. In that case, we would write
the above reference as

!bc
\externaldocument{file2}
...
...as shown in Section ref{sec:eqs} in cite{math_eqs_2020}.
!ec

To treat all these cases simultanesouly, Doconce
features *generalized references* which allows
a reference to have different formulations, depending on whether
the label is present in the document or is present in an
external document.
The syntax of generalized references reads

!bc
ref[internal][cite][external]
!ec
If all `ref{label}` references in the text `internal` are
to labels defined in the Doconce document, the
generalized reference becomes the text `internal`.
If one or more labels are not present in the document and
`latex` or `pdflatex` is output format, the generalized reference becomes the
text `internal` plus `cite`, while for all other formats the
text in `external` is used.

The example above can now be written as the generalized reference

!bc
...as shown in ref[Section ref{sec:eqs}][ in cite{math_eqs_2020}][
the document "Mathematical Equations":
"http://some.net/doc/matheqs.html" cite{math_eqs_2020}].
!ec
When `label{sec:eqs}` is found in the current Doconce document,
the generalized reference becomes

!bc
Section ref{sec:eqs}
!ec
If not, and `latex` or `pdflatex` is output, the reference becomes

!bc
Section ref{sec:eqs}] in cite{math_eqs_2020}
!ec
while in all other cases the reference becomes

!bc
the document "Mathematical Equations":
"http://some.net/doc/matheqs.html" cite{math_eqs_2020}
!ec

For the reference to a label in an external document
to work in the LaTeX case it is required to list this
document in the Doconce file as

!bc
# Externaldocuments: file2
!ec
Several external documents can be listed with comma as delimiter:

!bc
# Externaldocuments: file2, file3, myfile
!ec
on *a single line*. The `Externaldocuments` comment leads to use
of the `xr` package and insertion of `\externaldocument{file2}`
in the LaTeX output file. It is a good habit to place
the `Externaldocument` comment after the title, author, and date.

Very often a reference to a chapter in a book becomes just
a reference to a complete document, not a specific section,
if chapters are compiled individually. For `latex` and `pdflatex`
output one would then do a reference `Chapter ref{ch:eqs}`
as just `cite{eqs_doc_2008}`. That is, one would just use
the `cite` text and not `internal` plus `cite`. This is enabled
by writing the generalized reference with `refch` instead of
`ref`:

!bc
...as shown in refch[Chapter ref{ch:eqs}][cite{eqs_doc_2008}][
the document "Some Equations": "http://some.net/someeqs/"].
!ec

The `doconce ref_external` command will read all the labels in the
external documents listed in the `Externaldocuments:` comment
and use the publish file of the current document to automatically
generate substitution commands that translates ordinary references
to generalized references. For example, `doconce ref_external file1`
will find the reference

!bc
......as shown in Section ref{sec:eqs}.
!ec
as a reference to an label `sec:eqs` defined in `file2`, grab
the title of `file2.do.txt` and find the bibliographic data in
the publish file and make a substitution command

!bc
doconce subst "Section\s+ref{sec:eqs}" "..." $files
!ec
where "..." is the generalized reference as shown in the
examples above.
In other words, with `doconce ref_external` one can automatically
generate generalized references between, for example, chapters in
a book that exist as stand-alone documents.

!bwarning
Generalized references to equations work well in LaTeX, but
not in other formats as one cannot resolve the equation number
in the external document. It is then better to write different
text using the `FORMAT` variable in Mako:

!bc
% if FORMAT in ("pdflatex", "latex"):
By combining ref[(ref{eqs:g1})-(ref{eqs:g4})][ in cite{some_doc}][
dummy] we can derive the expression ...
% else:
One can from cite{some_doc} derive the expression
% endif
!ec
The `doconce ref_external` tool generates an `external` text
in case of references to equations that says
"reference to specific _equations_ (label eqs:g1 and eqs:g4)
in external document "name": "link" is not recommended".
One can then search for this text and make a Mako if-else rewrite
as shown above.
!ewarning

!bwarning Limited support
The `doconce ref_external` tool cannot correctly handle references
to a range of sections like

!bc
Sections ref{mydoc:sec1}-ref{mydoc:sec2}
!ec
The automatically generated generalized references should always
be manually checked and edited.
!ewarning

=== A Worked Example ===

Here is an example on a specific working generalized reference where
the LaTeX output also has a hyperlink:

!bc
As explained in
ref[Section ref{subsec:ex}][in "Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex"
cite{Doconce:test}][a "section":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex" in
the document "A Document for Testing Doconce":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}], Doconce documents may include tables.
!ec
With `latex` or `pdflatex` as output, this translates to
!bc
As explained in
Section ref{subsec:ex}, Doconce documents may include tables.
!ec
if the label `{subsec:ex}` appears in the present Doconce source, and
otherwise
!bc
As explained in
Section ref{subsec:ex} in "Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex"
cite{Doconce:test}, Doconce documents may include tables.
!ec
The latter Doconce code is translated to the following
LaTeX code:
!bc
As explained in
Section~\ref{subsec:ex} in
\href{{http://hplgit.github.io/doconce/...}}{Langtangen, 2012}
\cite{Doconce:test}, Doconce documents may include tables.
!ec
In a format different from `latex` and `pdflatex`, the effective Doconce
text becomes
!bc
As explained in
a "section":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex" in
the document "A Document for Testing Doconce":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}, Doconce documents may include tables.
!ec
The rendered text in the current format becomes

!bquote
As explained in
ref[Section ref{subsec:ex}][in "Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex"
cite{Doconce:test}][a "section":
"http://hplgit.github.io/doconce/test/demo_testdoc.html#subsec:ex" in
the document "A Document for Testing Doconce":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}], Doconce documents may include tables.
!equote

A complete "chapter" reference may look like

!bc
As explained in
refch[Chapter ref{ch:testdoc}]["Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}][the document
"A Document for Testing Doconce":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}], Doconce documents may include tables.
!ec
The output now, if `ch:testdoc` is not a label in the document,
becomes in the `latex` and `pdflatex` case

!bc
As explained in
"Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}, Doconce documents may include tables.
!ec
That is, the internal reference `Chapter ...` is omitted since
it is not meaningful to refer to an external document as "Chapter".
The resulting rendered text in the current format becomes
!bquote
As explained in
refch[Chapter ref{ch:testdoc}]["Langtangen, 2012":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}][the document
"A Document for Testing Doconce":
"http://hplgit.github.io/doconce/test/demo_testdoc.html"
cite{Doconce:test}], Doconce documents may include tables.
!equote

Note that LaTeX cannot
have links to local files, so a complete URL on the form
`http://...` must be used.

!bnotice Tip
Use `doconce ref_external` to get an overview of the external
references in a file. Very often you want to rewrite the text
to reduce the amount of external referencing. Remember then
to compile your document before running `doconce ref_external`
again since the command applies the compiled files to get information
(`tmp_preprocess_*` or `tmp_mako_*`) if you use any of the Preprocess
or Mako preprocessors.
!enotice

===== Index =====
idx{index} idx{citations} idx{bibliography}

An index can be created for the `latex`, `rst`, and `sphinx` formats
by the `idx` keyword, following a LaTeX-inspired syntax:
!bc
idx{some index entry}
idx{main entry!subentry}
idx{`verbatim_text` and more}
!ec
The exclamation mark divides a main entry and a subentry. Backquotes
surround verbatim text, which is correctly transformed in a LaTeX setting to
!bc
\index{verbatim\_text@\texttt{\rm\smaller verbatim\_text and more}}
!ec
Everything related to the index simply becomes invisible in plain
text, Epytext, StructuredText, HTML, and wiki formats.  Note: `idx`
commands should be inserted outside paragraphs, not in between the
text as this may cause some strange behaviour of reST and
Sphinx formatting.  As a recommended rule, index items are naturally
placed right after section headings, before the text begins, while
index items related to a paragraph should be placed above the
paragraph one a separate line (and not in between the text or between
the paragraph heading and the text body, although this works fine if
LaTeX is the output format). For paragraphs with `===` heading,
the index keywords should be placed above the heading.

The keywords in the index are automatically placed in a meta
tag in `html` output such that search engines can make use of the them.

===== Bibliography/References =====

Doconce applies the software tool "Publish":
"https://bitbucket.org/logg/publish" to handle the bibliography in a
document. With Publish it is easy to import BibTeX data and maintain a
database in a clean, self-explanatory textual format. From the Publish
format it is easy to go BibTeX and reST or straightforward Doconce
typesetting (and from there to HTML, plain text, wiki formats, and so
on).

Installing Publish is straightforward: just checkout the code on
"`bitbucket.org`": "https://bitbucket.org/logg/publish", move to the
`publish` directory and run `sudo python setup.py install`.

=== Importing your data to the Publish database ===

Many scientists have their bibliographic data in the BibTex format. Here we
assume that you have two files, `refs1.bib` and `refs2.bib`. These can
be imported to a Publish database, residing in the file `papers.pub`,
by the commands

!bc sys
publish import refs1.bib
publish import refs2.bib
!ec
During import, Publish may ask you for accepting the name of new
institutions or journals. Publish already have a database of journals
and institutions/departments, but when you add new, you also get
a file `venues.list` (in the current working directory) which will be used
for future imports in this directory. Make sure you store `publish.pub`
and `venues.list` along with your Doconce document files (e.g., add them to
your version control system).

=== Requirements to input data ===

!bnotice
Note that Publish only accepts BibTeX files where the keys (author,
title, etc.) are in lower case and where the data are enclosed in
curly braces. You may need to edit your BibTeX files to meet this
demand.
!enotice

The utility `doconce fix_bibtex4publish file.bib` fixes several known
issues with BibTeX files such that Publish has a better chance of
accepting the entries. Run this utility first, then run Publish,
respond to any requirements that Publish spits out, remove `papers.pub`
if it exists, and run the import statements again.

Although references are visible as numbers only in the
output, it is recommended to have apply a nice, consistent
typesetting of your keys. It is suggested to use the following scheme:

!bc
Langtangen_2003a          # single author
Langtangen_Pedersen_2002  # two authors
Langtangen_et_al_2002     # three or more authors
!ec
One can add a, b, c, and so forth if several keys feature the same
authors and year.

=== Adding new references to the database ===

When you get some new BibTeX references you simply put them in
a file, say `refs3.pub` and run the `publish import refs3.pub` command
to update the database. You may also consider editing the `papers.pub`
file directly when adding new references.

=== Exporting the database ===

Export of everything in the database to
BibTeX is done by

!bc sys
publish export mybibtexfile.bib
!ec
You can easily export subsets of the database, e.g., only papers associated
with a particular author (the Publish manual has details on how this is
done). Doconce will automatically export the database to BibTeX if
the output format is `latex` or `pdflatex`.

=== Referring to publications ===

We use the command

!bc
cite{key}
!ec
to refer to a publication with bibliographic key `key`.
Here is an example: cite{Langtangen_Pedersen_2002} discussed propagation of
large destructive water waves, cite{Langtangen_et_al_2002} gave
an overview of numerical methods for solving the Navier-Stokes equations,
while the use of Backward Kolmogorov equations for analyzing
random vibrations was investigated in cite{Langtangen_1994a}.
The book chapter cite{Mardal_et_al_2003a} contains information on
C++ software tools for programming multigrid methods. A real retro
reference is cite{Langtangen_1988d} about a big FORTRAN package.
Multiple references are also possible, e.g., see
cite{Langtangen_Pedersen_2002,Mardal_et_al_2003a}.

A LaTeX-style cite command with additional detailed reference is also possible,

!bc
cite[details]{key}
!ec
for example as in cite[Section 2]{Langtangen_et_al_2002}
or cite[Equation (4.2)]{Langtangen_et_al_2002}.

In LaTeX, the `cite` command is directly translated to the
corresponding LaTeX version of the command with a backslash; in reST
and Sphinx the citations becomes links, with the citation keys as
names; in HTML the citations are numbered from 1, 2, and so forth
according to their appearance, and the numbers appear as links; while
in other formats the citations are simply the keys inside square
brackets and the corresponding references are listed in the order they
are cited.

=== Specifying the Publish database ===

The specification of the Publish database file in the Doconce document
is done one a line containing `BIBFILE: papers.pub` (you may give
the database file another name and store it in another directory).
The references will be inserted at the place where this command appears.
Before the command you will often want to have a headline with
"References", "Bibliography", or similar.
Here is an example:

!bc

======= References =======

BIBFILE: papers.pub
!ec
In LaTeX and pdfLaTeX the `papers.pub` file is exported to BibTeX format
and included in the document, while in all other formats, suitable
text is produced from the database.

=== LaTeX bibliography style ===

The bibliography style is "plain" in LaTeX output. To change this, just
edit the `.p.tex` file. For example,

!bc sys
doconce format latex mydoc
doconce replace 'bibliographystyle{plain}' 'bibliographystyle{abbrev}' mydoc.p.tex
!ec

===== Tables =====

A table like

  |--------------------------------|
  |time  | velocity | acceleration |
  |--r--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|

is built up of pipe symbols and dashes:
!bc
  |--------------------------------|
  |time  | velocity | acceleration |
  |--------------------------------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|
!ec
The pipes and column values do not need to be aligned (but why write
the Doconce source in an ugly way?). In the line below the heading,
one can insert the characters `c`, `r`, or `l` to specify the
alignment of the columns (centered, right, or left, respectively).
Similar character can be inserted in the line above the header to
algn the headings. Pipes `|` can also be inserted to indicate
vertical rules in LaTeX tables (they are ignored for other formats).
An example of centered headings (which is default anyway), first
column left-adjusted and the others right-adjusted looks like

!bc
  |--c--------c-----------c--------|
  |time  | velocity | acceleration |
  |--l--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|
!ec

Note that not all formats offer alignment of heading or entries
in tables (`rst` and `sphinx` are examples). Also note that
Doconce tables are very simple: neither entries nor
headings can span several columns or rows. When that functionality
is needed, one can make use of the preprocessor and if-tests on
the format and insert format-specific code for tables.

The command-line option `--tables2csv` (to `doconce format`)
makes Doconce dump each table to CSV format in a file `table_X.csv`,
where `X` is the table number. This feature makes it easy to
load tables into spreadsheet programs for further analysis.

Data in CSV format can be transformed to Doconce table format
by the `doconce csv2table` utility:

!bc sys
Terminal> doconce csv2table somefile.csv > table.do.txt
!ec
This is a quick way of writing tables. For example, we can
write a text file `tmp.csv` with

!bc dat
time, velocity, acceleration
0.0, 1.4186, -5.01
2.0, 1.376512, 11.919
4.0, 1.1E+1, 14.717624
!ec
Running `doconce csv2table tmp.csv` creates the table

!bc
|------c--------------c--------------c-------|
| time         | velocity     | acceleration |
|------c--------------c--------------c-------|
| 0.0          | 1.4186       | -5.01        |
| 2.0          | 1.376512     | 11.919       |
| 4.0          | 1.1E+1       | 14.717624    |
|--------------------------------------------|
!ec

===== Exercises, Problems, Projects, and Examples =====

Doconce has special support for four types of "exercises", named
*exercise*, *problem*, *project*, or *example*.
These are all typeset as special kind of
sections. Such sections start with a subsection
headline, 5 `=` characters, and last up to the
next headline or the end of the file. The headline itself must
consists of the word "Exercise", "Problem", "Project", or "Example", followed
by a colon and a title of the exercise, problem, or project.
The next line(s) may contain a label and specification of the
name of result file (if the answer to the exercise is to be handed
in) and a solution file. The Doconce code looks like this:

!bc
===== Project: Determine the Distance to the Moon =====
label{proj:moondist}
file=earth2moon.pdf
solution=eart2moon_sol.do.txt

Here goes the running text of the project....

!ec
Doconce will recognize the exercise, problem, project, or example *title*,
the *label*, the *result file*, the *solution* (if any of
these three entities is present), and the *running text*. In addition,
one can add subexercise environments, starting with `!bsubex` and ending
with `!esubex`, on the beginning of separate lines.
Within the main exercise or
a subexercise, three other environments are possible: (full) solution,
(short) *answer*, and *hints*. The environments have begin-end
directives `!bans`, `!eans`, `!bsol`, `!esol`, `!bhint`, `!ehint`, which
all must appear on the beginning of a separate line (just as
`!bc` and `!ec`).

The solution environment allows inline
solution as an alternative to the `solution=...` directive mentioned above,
which requires that the solution is in a separate file. Comment lines
are inserted so that the beginning and end of answers and solutions can
be identified and removed if desired.

A full exercise set-up can be sketched as follows:
!bc
===== Exercise: Determine the Distance to the Moon =====
label{exer:moondist}
file=earth2moon.pdf

Here goes main body of text describing the exercise...

|bsubex
Subexercises are numbered a), b), etc.

|bans
Short answer to subexercise a).
|eans

|bhint
First hint to subexercise a).
|ehint

|bhint
Second hint to subexercise a).
|ehint
|esubex

|bsubex
Here goes the text for subexercise b).

|bhint
A hint for this subexercise.
|ehint

|bsol
Here goes the solution of this subexercise.
|esol
|esubex

|bremarks
At the very end of the exercise it may be appropriate to summarize
and give some perspectives. The text inside the |bremarks-|eremarks
directives is always typeset at the end of the exercise.
|eremarks

|bsol
Here goes a full solution of the whole exercise.
|esol
|ec

A recommended rule for using the different "exercise" types goes as follows:

  * Exercises are smaller problems directly related to the present chapter
    (e.g., with references to the text).
  * Problems are sufficiently independent of the chapter's text
    that they make sense on their own, separated from the rest of the docoment.
  * Projects are larger problems that also make sense on their own.
  * Examples are exercises, problems, or projects with full solutions.

The command line options `--without_answers` and `--without_solutions`
turn off output of answers and solutions, respectively, except for
examples.

Sometimes one does not want the heading of an exercise, problem, project,
or example to contain the keyword `Exercise:`, `Problem:`, `Project:`,
or `Example:`. By enclosing the keyword in braces, as in

!bc
===== {Problem}: Find a solution to a problem =====
!ec
the keyword is marked for being left out of the heading, resulting in
the heading "Find a solution to a problem".


The various elements of exercises are collected in a special data
structure (list of dictionaries) stored in a file `.mydoc.exerinfo`,
if `mydoc.do.txt` is the name of the Doconce file.  The file contains
a list of dictionaries, where keys in the dictionary corresponds to
elements in the exercise: filename, solution file, answer, label, list
of hints, list of subexercises, closing remarks, and the main body of
text. From this data structure it is easy to generate stand-alone
documents with exercises, problems, and projects with or without
short answers and full solutions.

Tailored formatting of exercises in special output formats can make
use of the elements in an exercise.  For example, one can image web
formats where the hints are displayed one by one when needed and where
the result file can be uploaded. One can also think of mechanisms for
downloading the solution file if the result file meets certain
criteria.  Doconce does not yet generate such functionality in any
output format, but this is an intended future feature to be
impelemented.

For now, exercises, problems, projects, examples are typeset as ordinary
Doconce sections (this is the most general approach that will work for many
formats). One must therefore refer to an exercise, problem, project, or
example by its label, which normally will translate to the section number
(in LaTeX, for instance) or a link to the title of the section.
The *title* is typeset without any leading "Exercise:", "Problem:",
or "Project:" word, so that references like
!bc
see Problem ref{...}
!ec
works well in all formats (i.e., no double "Problem Problem" appears).

__Remark.__
Examples are *not* typeset similarly to exercises unless one adds
the command-line option `--examples_as_exercises`. That is, without
this option, any heading and starting with `Example:` makes Doconce
treat the forthcoming text as ordinary text without any interpretation
of exercise-style instructions.
With the command-line option `--examples_as_exercises`,
one can use the `!bsubex` and `!bsol`
commands to indicate a subproblem and a solution. In this way, the
typesetting of the example looks like an exercise equipped with a solution.

=== List of Exercises, Problems, and Projects ===

Doconce also supports listing all exercises, problems, and projects
with corresponding page numbers.
By default, no such listing is enabled. When running `doconce ptex2tex` or
`ptex2tex`, there is a preprocessor variable `LIST_OF_EXERCISES`
that can be set to

 * `toc`: include exercises, problems, and projects as part of
   the table of contents
 * `loe`: make a separate list of exercises, problems, and projects,
   which appears after the table of contents

===== Blocks of Verbatim Computer Code =====
label{sec:verbatim:blocks}

Blocks of computer code, to be typeset verbatim, must appear inside a
"begin code" `!bc` keyword and an "end code" `!ec` keyword. Both
keywords must be on a single line and *start at the beginning of the
line*.  Before such a code block there must be a plain sentence
(at least if successful transformation to reST and
ASCII-type formats is desired). For example, a code block cannot come
directly after a section/paragraph heading or a table.

Here is a plain code block:

!bc
|bc
% Could be a comment line in some file
% And some data
1.003 1.025
2.204 1.730
3.001 1.198
|ec
!ec
which gets rendered as

!bc
% Could be a comment line in some file
% And some data
1.003 1.025
2.204 1.730
3.001 1.198
!ec


There may be an argument after the `!bc` tag to specify a certain
environment (for `ptex2tex`, `doconce ptex2tex`, or Sphinx) for
typesetting the verbatim code. For instance, `!bc dat` corresponds to
the data file environment and `!bc cod` is typically used for a code
snippet. There are some predefined environments explained below. If
there is no argument specifying the environment, one assumes some
plain verbatim typesetting (for `ptex2tex` this means the `ccq`
environment, which is defined in the config file `.ptex2tex.cfg`,
while for Sphinx it defaults to the `python` environment).

Since the config file for `ptex2tex` and command-line arguments for
the alternative `doconce ptex2tex` program can define what some environments
map onto with respect to typesetting, a similar possibility is
supported for Sphinx as well.  The argument after `!bc` is in case of
Sphinx output mapped onto a valid Pygments language for typesetting of
the verbatim block by Pygments. This mapping takes place in an
optional comment to be inserted in the Doconce source file, e.g.,
!bc
# sphinx code-blocks: pycod=python cod=fortran cppcod=c++ sys=console
!ec
Here, three arguments are defined: `pycod` for Python code,
`cod` also for Python code, `cppcod` for C++ code, and `sys`
for terminal sessions. The same arguments would be defined
in `.ptex2tex.cfg` for how to typeset the blocks in LaTeX using
various verbatim styles (Pygments can also be used in a LaTeX
context).

By default, `pro` is used for complete programs in Python, `cod` is
for a code snippet in Python, while `xcod` and `xpro` implies computer
language specific typesetting where `x` can be `f` for Fortran, `c`
for C, `cpp` for C++, `sh` for Unix shells, `pl` for Perl, `m` for
Matlab, `cy` for Cython, and `py` for Python.  The argument `sys`
means by default `console` for Sphinx and `CodeTerminal` (ptex2tex
environent) for LaTeX. Other specifications are `dat` for a data file
or print out, and `ipy` for interactive Python sessions (the latter
does not introduce any environment  in `sphinx` output, as interactive
sessions are automatically recognized and handled).  All these
definitions of the arguments after `!bc` can be redefined in the
`.ptex2tex.cfg` configuration file for ptex2tex/LaTeX and in the
`sphinx code-blocks` comments for Sphinx. Support for other languages
is easily added.

# (Any sphinx code-block comment, whether inside verbatim code
# blocks or outside, yields a mapping between bc arguments
# and computer languages. In case of muliple definitions, the
# first one is used.)

The enclosing `!ec` tag of verbatim computer code blocks must
be followed by a newline.  A common error in list environments is to
forget to indent the plain text surrounding the code blocks. In
general, we recommend to use paragraph headings instead of list items
in combination with code blocks (it usually looks better, and some
common errors are naturally avoided).

Here is a verbatim code block with Python code (`pycod` style):
!bc
|bc pycod
# regular expressions for inline tags:
inline_tag_begin = r'(?P<begin>(^|\s+))'
inline_tag_end = r'(?P<end>[.,?!;:)\s])'
INLINE_TAGS = {
    'emphasize':
    r'%s\*(?P<subst>[^ `][^*`]*)\*%s' % \
    (inline_tag_begin, inline_tag_end),
    'verbatim':
    r'%s`(?P<subst>[^ ][^`]*)`%s' % \
    (inline_tag_begin, inline_tag_end),
    'bold':
    r'%s_(?P<subst>[^ `][^_`]*)_%s' % \
    (inline_tag_begin, inline_tag_end),
}
|ec
!ec
The typeset result of this block becomes

!bc pycod
# regular expressions for inline tags:
inline_tag_begin = r'(?P<begin>(^|\s+))'
inline_tag_end = r'(?P<end>[.,?!;:)\s])'
INLINE_TAGS = {
    'emphasize':
    r'%s\*(?P<subst>[^ `][^*`]*)\*%s' % \
    (inline_tag_begin, inline_tag_end),
    'verbatim':
    r'%s`(?P<subst>[^ ][^`]*)`%s' % \
    (inline_tag_begin, inline_tag_end),
    'bold':
    r'%s_(?P<subst>[^ `][^_`]*)_%s' % \
    (inline_tag_begin, inline_tag_end),
}
!ec
And here is a C++ code snippet (`cppcod` style):
!bc cppcod
void myfunc(double* x, const double& myarr) {
    for (int i = 1; i < myarr.size(); i++) {
        myarr[i] = myarr[i] - x[i]*myarr[i-1]
    }
}
!ec

# When showing copy from file in !bc envir, intent a character - otherwise
# ptex2tex is confused and starts copying. However, here (in make.sh) we use
# doconce ptex2tex which does not have this problem.
Computer code can be copied directly from a file, if desired. The syntax
is then
!bc
@@@CODE myfile.f
@@@CODE myfile.f fromto: subroutine\s+test@^C\s{5}END1
!ec
The first line implies that all lines in the file `myfile.f` are
copied into a verbatim block, typset in a `!bc Xpro` environment, where
`X` is the extension of the filename, here `f` (i.e., the environment
becomes `!bc fpro` and will typically lead to some Fortran-style
formatting).  The
second line has a `fromto:` directive, which implies copying code
between two lines in the code, typset within a !`bc Xcod`
environment (again, `X` is the filename extension, implying the
type of file). Note that the `pro` and `cod` arguments are only used for LaTeX
and Sphinx output, all other formats will have the code typeset within
a plain `!bc` environment.) Two regular expressions, separated by the
`@` sign, define the "from" and "to" lines.  The "from" line is
included in the verbatim block, while the "to" line is not. In the
example above, we copy code from the line matching `subroutine test`
(with as many blanks as desired between the two words) and the line
matching `C END1` (C followed by 5 blanks and then the text END1). The
final line with the "to" text is not included in the verbatim block.

One can also specify the code environment explictly rather than relying
on the file extension:

!bc
@@@CODE somefile.py envir=X fromto: def myfunc@def yourfunc
!ec

Let us copy a whole file (the first line above):

@@@CODE __testcode.f

Let us then copy just a piece in the middle as indicated by the `fromto:`
directive above:

@@@CODE __testcode.f fromto:subroutine\s+test@^C\s{5}END1

Note that the "to" line is not copied into the Doconce file, but the
"from" line is. Sometimes it is convenient to also neglect the
"from" line, a feature that is allowed by replacing `fromto:` by
`from-to` ("from with minus"). This allows for copying very similar
code segments throughout a file, while still distinguishing between them.
Copying the second set of parameters from the text
!bc cod
# --- Start Example 1 ---
c = -1
A = 2
p0 = 4
simulate_and_plot(c, A, p0)
# --- End Example 1 ---

# --- Start Example 2 ---
c = -1
A = 1
p0 = 0
simulate_and_plot(c, A, p0)
# --- End Example 2 ---
!ec
is easy with
!bc
from-to: Start Example 2@End Example 2
!ec
With only `fromto:` this would be impossible.

Remark for those familiar with `ptex2tex`: The from-to
syntax is slightly different from that used in `ptex2tex`. When
transforming Doconce to LaTeX, one first transforms the document to a
`.p.tex` file to be treated by `ptex2tex`. However, the `@@@CODE` line
is interpreted by Doconce and replaced by the mentioned
pro or cod environment which are defined in the `ptex2tex` configuration
file.

Remark for those familiar with the `listings` package in LaTeX: the
`listing` package can copy code from files, but snippets must be
specified through exact line numbers. The `@@@CODE` directive
above works with regular expressions which are much less sensitive
to edits of the source code file than the line numbers.
Moreover, copy of code from file works in Dococe across formats
(HTML, Sphinx, Markdown, etc.).


===== LaTeX Blocks of Mathematical Text =====
label{mathtext}

Blocks of mathematical text are like computer code blocks, but
the opening tag is `!bt` (begin TeX) and the closing tag is
`!et`. It is important that `!bt` and `!et` appear on the beginning of the
line and followed by a newline.
!bc
|bt
\begin{align}
{\partial u\over\partial t} &= \nabla^2 u + f, label{myeq1}\\
{\partial v\over\partial t} &= \nabla\cdot(q(u)\nabla v) + g. label{myeq2}
\end{align}
|et
!ec
# #ifdef EXTRA
Here is the result:

!bt
\begin{align}
{\partial u\over\partial t} &= \nabla^2 u + f, label{myeq1}\\
{\partial v\over\partial t} &= \nabla\cdot(q(u)\nabla v) + g. label{myeq2}
\end{align}
!et
# #endif

The support of LaTeX mathematics varies among the formats:

 * Output in LaTeX (`latex` and `pdflatex` formats) has of course full
   support of all LaTeX mathematics, of course.
 * The `html` format supports single equations and multiple equations
   via the align environment, also with labels.
 * Markdown (`pandoc` format) allows single equations and inline mathematics.
 * MediaWiki (`mwiki` format) does not enable labels in equations and hence
   equations cannot be referred to.

The main conclusion is that for
output beyond LaTeX (`latex` and `pdflatex` formats), stick to
simple `\[` and `\]` or `equation` and `align` or `align*` environments,
and avoid referring to equations in MediaWikis.

Going from Doconce to MS Word is most easily done by outputting in
the `latex` format and then using the Pandoc program to translate
from LaTeX to MS Word (note that only a subset of LaTeX will be
translated correctly).

If the document targets formats with and without support of LaTeX
mathematics, one can use the preprocessor to typeset the mathematics
in two versions. After `#if FORMAT in ("latex", "pdflatex", "html",
"sphinx", "mwiki", "pandoc")` one places LaTeX mathematics, and after
`#else` one can write inline mathematics in a way that looks nice in
plain text and wiki formats without support for mathematical
typesetting. Such branching can be used with mako if-else statements
alternatively:

!bc
% if FORMAT in ("latex", "pdflatex", "html", "sphinx", "mwiki", "pandoc"):
|bt
\[ \sin^2x + \cos^2x = 1,\]
|et
% else:
|bc
              sin^2(x) + cos^2(x) = 1,
|ec
% endif
!ec


=== Mathematics for PowerPoint/OpenOffice ===

If you have LaTeX mathematics written in Doconce, it is fairly easy
to generate PNG images of all mathematical formulas and equations for
use with PowerPoint or OpenOffice presentations.

  o Make a Sphinx version of the Doconce file.
  o Go to the Sphinx directory and load the `conf.py` file into
    a browser.
  o Search for "math" and comment out the
    `'sphinx.ext.mathjax'` (enabled by default) and
    `'matplotlib.sphinxext.mathmpl'` (disabled by default)
    lines, and uncomment the `'sphinx.ext.pngmath'` package.
    This is the package that generates small PNG pictures
    of the mathematics.
  o Uncomment the line with `pngmath_dvipng_args =` and
    set the PNG resolution to `-D 200` when the purpose is to
    generate mathematics pictures for slides.
  o Run `make html`.
  o Look at the HTML source file in the `_build/html`
    directory: all mathematics are in `img` tags with `src=`
    pointing to a PNG file and `alt=` pointing to the LaTeX
    source for the formula in question. This makes it very
    easy to find the PNG file that corresponding to a particular
    mathematical expression.


===== Macros (Newcommands) =====
label{newcommands}

Doconce supports a type of macros via a LaTeX-style *newcommand*
construction.  The newcommands defined in a file with name
`newcommand_replace.tex` are expanded when Doconce is filtered to
other formats, except for LaTeX (since LaTeX performs the expansion
itself).  Newcommands in files with names `newcommands.tex` and
`newcommands_keep.tex` are kept unaltered when Doconce text is
filtered to other formats, except for the Sphinx format. Since Sphinx
understands LaTeX math, but not newcommands if the Sphinx output is
HTML, it makes most sense to expand all newcommands.  Normally, a user
will put all newcommands that appear in math blocks surrounded by
`!bt` and `!et` in `newcommands_keep.tex` to keep them unchanged, at
least if they contribute to make the raw LaTeX math text easier to
read in the formats that cannot render LaTeX.  Newcommands used
elsewhere throughout the text will usually be placed in
`newcommands_replace.tex` and expanded by Doconce.  The definitions of
newcommands in the `newcommands*.tex` files *must* appear on a single
line (multi-line newcommands are too hard to parse with regular
expressions).

# #ifdef EXTRA
__Example.__ Suppose we have the following commands in
`newcommand_replace.tex`:

@@@CODE newcommands_replace.tex

and these in `newcommands_keep.tex`:

@@@CODE newcommands_keep.tex

The LaTeX block
!bc
\beqa
\x\cdot\normalvec &=& 0, label{my:eq1}\\
\Ddt{\uvec} &=& \Q \ep   label{my:eq2}
\eeqa
!ec
will then be rendered to
!bt
\beqa
\x\cdot\normalvec &=& 0, label{my:eq1}\\
\Ddt{\uvec} &=& \Q \ep   label{my:eq2}
\eeqa
!et
in the current format.
# #endif

===== Admonitions =====

Doconce offers strong support for admonition environments, such
as warning boxes, notification boxes, question boxes,
and summary boxes. The boxes normally have an icon, a heading,
and may also have a background color. A special box, the block,
has never any icon and can be used when an icon would be disturbing
or misleading.

The following admonition environments are available:
`block`, `warning`, `notice`, `question`, and `summary`.
The box is defined by begin and end tags such as `!bnotice` and `!enotice`.
The title of the box is fully customizable.

Here are a few examples:

!bc
|bwarning
Here is a warning!
|ewarning

|bnotice Hint
This is a hint.
|enotice

|bblock This is a block.
A block has never any icon. It is mostly used in slides
and give the text block effect in LaTeX beamer.
|eblock

|bnotice Going deeper
This is text meant to provide more details. The box has the
layout of the notice box, but a custom title, here "Going deeper".
|enotice

Finally some summary:

|bsummary
The main message is to utilize the admonition styles for
marking different parts of the text
|esummary
!ec
The above Doconce code is in the present format rendered as

!bwarning
Here is a warning!
!ewarning

!bnotice Hint
This is a hint.
!enotice

!bblock This is a block.
A block has never any icon.
!eblock

!bnotice Going deeper
This is text meant to provide more details. The box has the
layout of the notice box, but a custom title, here "Going deeper".
!enotice

Finally some summary:

!bsummary
The main message is to utilize the admonition styles for
marking different parts of the text
!esummary

The layout of admonitions depend on the format.
In `rst` and `sphinx` one applies the native admonitions, but
in `sphinx` the `automake_sphinx.py` script manipulates the HTML
file to set a gray background for all admonitions.
In `html` one has a command-line argument `--html_admon` that
can be set to different styles:

 * `--html_admon=gray` for
   icons with gray background and small font,
 * `--html_admon=yellow`
   and `--html_admon=apricot` are similar,
   but the icons and colors are different,
 * `--html_admon=colors` has quite bright colors
   as backgrounds for the different admonitions,
 * `--html_admon=lyx`
   gives a white background and small icons,
 * `--html_admon=paragraph` results in a simple paragraph with the
   admon title as heading.

The options `--html_admon_bg_color=...` and `--html_admon_bd_color=...`
can be used to override the default background and boundary frame colors
of the admon styles (respectively). These options have only effect
for the `apricot`, `yellow`, and `gray` styles.

Some recommended combinations for admonitions in HTML are

 * `--html_style=solarized`, `--html_admon=apricot`, `--pygments_html_style=perldoc`
 * `--html_style=blueish2`, `--html_admon=yellow`, `--no_pygments_html`
 * `--html_style=blueish2`, `--html_admon=yellow`, `--pygments_html_style=default`
 * `--html_style=bloodish`, `--html_admon=gray`, `--no_pygments_html`
 * `--html_style=bloodish`, `--html_admon=gray`, `--pygments_html_style=default`
 * `--html_style=vagrant`, `--pygments_html_style=default`, `--html_template=...`

The `vagrant` HTML style has CSS files that override the definition
how the admons are typset. The `notice` environment is gray with an
icon (defined in `vagrant.css`), while the others are yellow (defined
in `twitter_bootstrap.css`). The `--html_admon` color has no effect
for the `vagrant` style.

In `latex` and `pdflatex`, the type of admonition style is set by
the command-line option `--latex_admon=`.
Several values are available:

 * `paragraph` is the simplest type of admonition and typeset
   as plain text with an optional paragraph heading.
 * `colors1` (inspired by the NumPy User Guide) applies different colors for
   the different admons with an embedded icon.
 * `colors2` is like `colors1` but the text is wrapped around the icon.
 * `mdfbox` is the default and gives rounded (gray) boxes with a potential
   title and no icon (using the very flexible `mdframed` packaged in LaTeX)
 * `graybox2` has square corners, gray background, and is narrower
   than `mdfbox`. One special feature of `graybox2` is the summary
   admon, which has a different look with horizontal rules only,
   and for A4 format, the summary box is half of the text width and
   wrapped with running text around (if it does not contain verbatim text,
   in that case the standard `graybox2` style is used). This small
   summary box is effective in proposals to disperse small paragraphs
   of key points around.
 * `grayicon` has icons and a light gray background.
 * `yellowicon` has icons and a light yellow background.

There is also an option `--latex_admon_color=...` that can be used
to override the default color. Values are either saturated colors
like `gray!10` or an RGB tuple `0.95,0.91,0.97`. The chosen color
replaces all default colors for all admon styles except `paragraph`.
For example, an oval white box is produced by `--latex_admon=mdfbox`
and `--latex_admon_color=white`.

=== The Box Environment ===

A plain box without any title or colored background,
just a rectangular frame, is also
available. The syntax goes like

!bc
|bbox
|bt
\[ \nabla\cdot\bm{u} = 0  \quad\hbox{(mass balance)}\]
|et
|ebox
!ec
resulting in

!bbox
!bt
\[ \nabla\cdot\bm{u} = 0\quad\hbox{(mass balance)}\]
!et
!ebox

Admonitions are usually used to typeset something that should be distinct
from the running text: a warning, a remark, a notification, a question,
a summary, while a box is often used to highlight a key finding
in the running text: an equation, a hypothesis, a theorem, a
rule, or a conclusion.

===== Typesetting of Algorithms =====

Doconce has no support for typesetting of algorithms, while LaTeX
has quite sophisticated support. LaTeX writes need some strategy with
dealing with algorithms in Doconce: they should be sophisticated
when the output is in LaTeX and they should be readable when the
output is in other formats that have no native support for
algorithms.

The simplest solution is to use the preprocessor (Preprocess or Mako)
to allow different solutions for different formats.
There are basically three typesetting styles available: LaTeX
algorithm environments, pseudo code in a verbatim block, and
a nested list. A preprocessor variable, say `ALG` can be used
to select the typesetting. With Mako we can write

!bc
% if ALG == 'latex':
# Write native LaTeX code for the algorithm
% elif ALG == 'code':
# Write pseudo code in (e.g.) a python-like style
|bc pycode
if feature in element:
...
|ec
% elif ALG == 'list':
# Use lists to express the algorithm
  o if this element has the feature:
    * ...
% endif
!ec


===== Preprocessing Steps =====

Doconce allows preprocessor commands for, e.g., including files,
leaving out text, or inserting special text depending on the format.
Two preprocessors are supported: preprocess
(URL:"http://code.google.com/p/preprocess") and mako
(URL:"http://www.makotemplates.org/"). The former allows include and if-else
statements much like the well-known preprocessor in C and C++ (but it
does not allow sophisticated macro substitutions). The latter
preprocessor is a very powerful template system.  With Mako you can
automatically generate various type of text and steer the generation
through Python code embedded in the Doconce document. An arbitrary set
of `name=value` command-line arguments (at the end of the command line)
automatically define Mako variables that are substituted in the document.

Doconce will detect if preprocess or Mako commands are used and run
the relevant preprocessor prior to translating the Doconce source to a
specific format.

The preprocess and mako programs always have the variable `FORMAT`
defined as the desired output format of Doconce (`html`, `latex`,
`plain`, `rst`, `sphinx`, `epydoc`, `st`).  It is then easy to test on
the value of `FORMAT` and take different actions for different
formats. Below is an example:

@@@CODE _format_specific1.do.txt

A variable `DEVICE` is also defined. It equals `screen` by default,
but the command-line argument `--device=paper` can set `DEVICE` to
`paper` (or another value). Testing on `DEVICE` inside the document
makes it possible to test if the output is on paper media, a sreen,
or a particular device.

Other user-defined variables for the preprocessor can be set at
the command line as explained in Section ref{doconce2formats}.

More advanced use of mako can include Python code that may automate
the writing of parts of the document.



===== Splitting Documents into Smaller Pieces =====

Long documents are conveniently split into smaller Doconce files.
However, there must be a master document including all the pieces,
otherwise references to sections and the index will not work properly.
The master document is preferably a file just containing a set of
preprocessor include statements of the form `#include "file.do.txt"`.
The preprocessor will put together all the pieces so that Doconce
sees a long file with the complete text.

# #ifdef DEPRECATED
For reST and Sphinx documents it is a point to have
separate `.rst` files and an index file listing the various `.rst`
that build up the document. To generate the various `.rst` files one
should not run Doconce on the individual `.do.txt` files, because then
references and index entries are not treated correctly. Instead,
run Doconce on the master file and invoke the script `doconce split_rst`
to split the long, complete `.rst` into pieces. This process requires
that each `#include "file.do.txt` line in the master file is preceded by a
"marker line" having the syntax `#>>>>>> part: file >>>>>>`, where
`file` is the filename without extension. The number of greater than
signs is not important, but it has to be a comment line and it has
to contain the keyword `part:`.

Here is an example. Say the name of the master file is `master.do.txt`.
The following Bash script does the job:
We run
!bc cod
doconce format sphinx master
# Split master.rst into parts
# as defined by #>>>>> part: name >>>>> lines
files=`doconce split_rst master.rst`

dir=sphinxm-rootdir

if [ ! -d $dir ]; then
  doconce sphinx_dir dirname=$dir author='me and you' \
          version=1.0 theme=default $files
  sh automake_sphinx.sh
else
  for file in $files; do
    cp $file.rst $dir
  done
  cd $dir
  make html
  cd ..
fi
!ec
The autogenerated `automake_sphinx.sh` file (by `doconce sphinx_dir`)
is compatible with a master `.rst` file split into pieces as long as
the complete set of pieces in correct order is given to `doconce sphinx_dir`.
This set is the output of `doconce split_rst`, which we catch in a
variable `files` above.
# #endif

For web documents it is often desired to split long pages into shorter
ones. This is done by the Doconce command `!split` placed at the
beginning of a line. The `!split` commands works with output in
`html`, `rst`, `sphinx`, `latex`, and `pdflatex`. The `!split` command
are normally placed before section headings. It is very actively used
when writing slides with Doconce. The `doconce format` command does not
recognize `!split` instructions: one needs to run `doconce split_*`
as a postprocess, where the `*` means `html`, `rst`, or `beamer`.

__HTML.__
Splitting an HTML document is done by

!bc sys
Terminal> doconce format html mydoc
Terminal> doconce split_html mydoc
!ec
The `mydoc.html` document created by the first command is replaced
by a new HTML file, representing the first part of the document,
after the second command. The various files that constitute the
parts of the document are listed after the `split_html` command.
The files have names `mydoc.html`, `._mydoc000.html` (equal to
`mydoc.html`), `._mydoc001.html`, `._mydoc002.html`, and so
on. Recall that all the parts are needed if the HTML document is to be moved
to another location (you can always check `.mydoc_html_file_collection`
for a list of all the files that are needed to display this HTML
document).

MathJax cannot refer to equations defined in other HTML files, but
the `doconce split_html` fixes this problem. Note, however, that
running `doconce split_html` leads to another equation numbering
than in the original HTML document. In the latter, we use AMS
equation numbering, which means that the standard LaTeX conventions
are followed, while in the splitted document only the subset of
equations with labels are given numbers.

The HTML documents have very simple navigation buttons for the previous
and next document. These are not customizable directly, but one can easily
look up the HTML code and use `doconce replace` to edit the links to
the images used for navigation. Some more colorful images arise from

!bc sys
Terminal> doconce replace 'prev1.png' 'Knob_Left.png' \
          mydoc.html ._mydoc*.html
Terminal> doconce replace 'next1.png' 'Knob_Forward.png' \
          mydoc.html ._mydoc*.html
!ec
This works because the `Knob*.png` images live in the same place in the
Doconce repository as `prev1.png` and `next1.png`. Other images can be
used by replacing the whole URL.

With an HTML template one can have much more sophisticated navigation
between parts. One example is the template
in `bundled/html_styles/style_vagrant/template_vagrant.html` in the Doconce
source.

__reStructuredText and Sphinx.__
Here is a typical split of a large Sphinx document `mydoc.rst`
into smaller pieces:

!bc sys
Terminal> doconce sphinx_dir author="Some Author" \
          title="Short title" theme=fenics dirname=mydir mydoc
Terminal> doconce format sphinx mydoc
Terminal> doconce split_rst mydoc
Terminal> python automake_sphinx.py
!ec
The `doconce format sphinx mydoc` command is needed to produce `mydoc.rst`,
which is the starting point for the `doconce split_rst` command.
The various files that constitute the complete Sphinx document are
`mydoc.rst`, `._mydoc000.rst`, `._mydoc001.rst`, `._mydoc002.rst`,
and so on. The `automake_sphinx.py` script ensures that the Sphinx document
is compiled correctly. If all links to local files are in a `_static`
directory, the whole Sphinx document exists in a complete version
in the compiled directory (usually `sphinx-rootdir/_build/html`) and
can easily be moved around.


LaTeX Beamer slides generated from Doconce source also apply `!split` to
indicate the start of individual slides. However, the split is
performed by the `doconce slides_beamer` command and does not result
in individual files like `split_rst` and `split_html` do.


===== Missing Features =====

Doconce does not aim to support sophisticated typesetting, simply because
sophisticated typesetting usually depend quite strongly on the particular
output format chosen. When a particular feature needed is not supported
by Doconce, it is recommended to hardcode that feature for a particular
format and use the if-else construction of the preprocessor. For example,
if a sophisticated table is desired in LaTeX output, do something like

@@@CODE _format_specific2.do.txt

Similarly, if certain adjustments are needed, like
pagebreaks in LaTeX, hardcode that in the Doconce format (and recall
that this is really LaTeX dependent - pagebreaks are not
relevant HTML formats).

Instead of inserting special code in the Doconce document, one can
alternatively script editing of the output from Doconce. That is,
we develop a Python or Bash script that runs the translation of
a Doconce document to a ready docoment in another format. Inside this
script, we may edit and fine-tune the output from Doconce.


===== Header and Footer =====

Some formats use a header and footer in the document. LaTeX and
HTML are two examples of such formats. When the document is to be
included in another document (which is often the case with
Doconce-based documents), the header and footer are not wanted, while
these are needed (at least in a LaTeX context) if the document is
stand-alone. We have introduced the convention that if `TITLE:`
is found at the beginning of the line (i.e., the document
has a title), the header and footer are included, otherwise not.


===== Emacs Doconce Formatter =====
label{emacs:doconce}

## Note: check http://www.latex-community.org/viewtopic.php?f=28&t=208
## for highly configurable latex editors that perhaps can be adapted
## to doconce (Kile seems to be the choice because of extensibility)

The file ".doconce-mode.el": "https://github.com/hplgit/doconce/blob/master/misc/.doconce-mode.el" in the Doconce source distribution
gives a "Doconce Editing Mode" in Emacs.

Here is how to get the Doconce Editing Mode in Emacs: Download ".doconce-mode.el": "https://raw.github.com/hplgit/doconce/master/misc/.doconce-mode.el" and save it in your home directory, then add these lines to `~/.emacs`:
!bc
(load-file "~/.doconce-mode.el")
!ec
Emacs will now recognize files with extension `.do.txt` and enter
the Doconce Editing Mode.

The major advantage with the Doconce Editing Mode in Emacs is that
many keyboard shortcuts are defined:

|--------------------------------------------------------|
| Emacs key      | Action                                |
|----l-------------------------l-------------------------|
|  Ctrl+c f      | figure                                |
|  Ctrl+c v      | movie/video                           |
|  Ctrl+c h1     | heading level 1 (section/h1)          |
|  Ctrl+c h2     | heading level 2 (subsection/h2)       |
|  Ctrl+c h3     | heading level 2 (subsection/h3)       |
|  Ctrl+c hp     | heading for paragraph                 |
|  Ctrl+c me     | math environment: !bt equation !et    |
|  Ctrl+c ma     | math environment: !bt align !et       |
|  Ctrl+c ce     | code environment: !bc !ec             |
|  Ctrl+c cf     | code from file: @@@CODE               |
|  Ctrl+c table2 | table with 2 columns                  |
|  Ctrl+c table3 | table with 3 columns                  |
|  Ctrl+c table4 | table with 4 columns                  |
|  Ctrl+c exer   | exercise outline                      |
|  Ctrl+c slide  | slide outline                         |
|  Ctrl+c help   | print this table                      |
|--------------------------------------------------------|

Typing `Ctrl+c help` prints the above table in Emacs. Try out
the different shortcuts and see how handy they are in learning
Doconce and saving much typing!


======= Writing Slides =======

It is a fast procedure to make slides from large amounts of Doconce
text, in particular for condensing running material for teaching or
just providing the slide set as an overview or study guide.
The slides can either be ordinary, separate slides - or just
a document with much briefer text and emphasis on bullet lists,
figures, mathematical formulas, admonitions, and little text.

Points:

 * Only some pygments style are suited for a particular reveal.js/deck.js
   theme
 * Only some admon styles are appropriate
 * Admon styles are erased in reveal
 * Use `--keep_pygments_html_bg` to avoid big changes in background
   color for code

===== Overview =====

Basically, Doconce slides are ordinary Doconce text with `!split`
inserted before each slide. Nevertheless, contents of slide differ
considerably from ordinary running text. Some guidelines on
the elements within each slide are necessary to produce effective
slide sets:

 * Use a subsection heading as slide heading (5 `=`).
 * Limit the amount of running text (as always).
 * Limit the amount of material so it fits within a slide
   (inspect slides visually to move or delete content - just
   an extra `!split` and a new heading is enough to make a new
   slide).
 * Use the `slidecell` environment (see below) to create
   a grid of slide cells (makes it easy to move figures and
   bullet lists or text around).
 * Adjust the size of figures (`width` parameter for HTML,
   `frac` parameter for LaTeX Beamer) so they become effective
   on the slide.

Doconce can generate two types of slides: HTML5+CSS3 type of
slides to be presented through a web browser, and classical
LaTeX Beamer slides.

===== HTML5 Slides =====

# doconce-adjusted styles: easy to switch between styles since
# font sizes are compatible

Not yet written...

Just a very preliminary sketch of commands:
!bc sys
Terminal> doconce format html myslides \
          --pygments_html_style=native --keep_pygments_html_bg
Terminal> doconce slides_html myslides reveal \
          --html_slide_theme=darkgray
!ec

=== Potential Problems ===

 * Some newer Firefox does not show rounded corners of the
   admonition boxes, e.g., notice and warning (tested on Ubuntu)
 * Doconce performs some adjustments of the spacing around
   equations. More edits (automate with `doconce subst`) might be needed.

===== LaTeX Beamer Slides =====

Not yet written...

=== Themes ===

Four themes come with Doconce: `X_Y`, where `X` is `blue` or `red`
(the main color of the slides) and `Y` is "`plain`":
"http://hplgit.github.io/teamods/doconce/demo/demo_red_plain.pdf"
for simple layout and
"`shadow`": "http://hplgit.github.io/teamods/doconce/demo/demo_blue_shadow.pdf"
for shadowed boxes and more visual structure in the slides.

======= Mako Programming =======

The "Mako": "http://docs.makotemplates.org/" templating engine is used
as preprocessor for Doconce documents, but the "Preprocess": "http://code.google.com/p/preprocess" is run prior to Mako and is recommended for
including other files via `# #include "filename"`. Preprocess is also
sufficient for if-else tests to steer which parts of the text that
are to be compiled. For more demanding tasks, use Mako, which resembles
a real programming language.

!bwarning
Unfortunately, the combination of Mako and LaTeX mathematics may
lead to problems because Mako applies syntax like `${var}` to extract
variables or call functions, while LaTeX mathematics sometimes applies
the same syntax, e.g., `${\cal O}(\Delta x^2)$` which looks like a
Mako function call. This problem can give rise to strange error
messages from Mako, usually that a variable is not defined.
!ewarning

===== The Basics of Mako =====

Just a preliminary sketch of some Mako code (next example is better!):

!bc
# Define variables
<%
mycounter = 1
mydict = {}
%>

# Assume MYVAR is given on the command line as MYVAR=mytext (e.g.)
% if MYVAR is not UNDEFINED:
The value of MYVAR is ${MYVAR}.
% endif

<%
## Manipulation of variables
mycounter += 1
%>

% if MYVAR in (2,4,6):
MYVAR is even integer in [2,6].
% elif MYVAR > 1000000:
MYVAR is big.
% else:
MYVAR=${MYVAR}, mycounter=${mycounter}.
% endif

# Function
<%
# Define Python function: FORMAT and DEVICE
# are always defined

def link(filename):
    url = "https://github.com/some/path/to/' + filename + '"'
    if DEVICE == 'screen':
        # make link to url
        return '"filename":' + url
    elif DEVICE == 'paper':
        # write URL explicit on paper
        return 'URL:' + url
%>

<%doc>
This
is
a
block
comment in Mako.
<%doc/>
!ec

One can use Mako to extend the Doconce syntax. Two examples are given next.

===== Example: Extending Tables to Handle Figures =====
label{manual:tables:wfigs}

Doconce tables cannot contain figures, since figures must appear on
a single line with the special syntax `FIGURE: [file, ...]`.
What if you want a table of thumbnail figures with hyperlinks?

=== Solution for LaTeX and HTML ===

We first restrict the attention to LaTeX and HTML. In those cases
we can create an ordinary table and insert a call to a Mako
function in cells in the table to return the proper LaTeX or
HTML code for displaying a figure.

The Mako call syntax in a cell is decided to be
`${tfig('080')}`, which insert the figure `mov/wave_frames/frame_0080.png`.
A 3x3 table of figures then look like

!bc
|-------------------------------------------------|
|               |                |                |
|-------c---------------c----------------c--------|
|${tfig('080')} | ${tfig('085')} | ${tfig('090')} |
|${tfig('095')} | ${tfig('100')} | ${tfig('105')} |
|${tfig('110')} | ${tfig('115')} | ${tfig('120')} |
|-------------------------------------------------|
!ec
We do not want a heading, just a grid of figures, but a heading is
required in Doconce figures, so the solution is to provide
empty column names in the heading. This solution
gives acceptable results in HTML and LaTeX.

The Mako function can be a plain Python function:

!bc pycod
<%
def tfig(fileno):
    p = 'mov/wave_frames/frame_0' + fileno + '.png'  # path
    if FORMAT in ("latex", "pdflatex"):
        text = r'\includegraphics[width=2cm]{%s}' % p
    elif FORMAT == "html":
        text = '<a href="%s"><img src="%s" width="300"></a>' % (p, p)
    else:
        text = '"`%s`": "%s"' % (fileno, p)  # plain link
    return text
%>
!ec
Note that for other formats than LaTeX and HTML we just return a link to
the figure.

!bnotice
A corresponding solution
for Sphinx will not work because inline figures in Sphinx has
a syntax with pipe symbols ('|') that interfer with the
column separator in tables in Doconce. Returning the HTML
code in case of Sphinx will just display that HTML code
in the cells, not the rendered HTML code. A solution that
includes Sphinx is provided later.
!enotice

The resulting table is displayed below.

# @@@FIGTABLE 3x3 080 085 090 095 100 105 110 115 120

# Cannot just have the Mako code here and generate the table
# because this manual cannot be run with Mako (--no_mako
# is used in make.sh).
# The code below is generated by having the Mako function
# and table in a separate file _figtable.do.txt and then
# manually generating the various formats and inserting
# them here.

# #if FORMAT == "pdflatex"
# pdflatex, not that latex will not work with PNG images
\begin{quote}\begin{tabular}{ccc}
\hline
 \\
\hline
\includegraphics[width=2cm]{mov/wave_frames/frame_0080.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0085.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0090.png} \\
\includegraphics[width=2cm]{mov/wave_frames/frame_0095.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0100.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0105.png} \\
\includegraphics[width=2cm]{mov/wave_frames/frame_0110.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0115.png} & \includegraphics[width=2cm]{mov/wave_frames/frame_0120.png} \\
\hline
\end{tabular}\end{quote}
# #elif FORMAT == "html"
# html
<p>
<table border="1">
<tr></tr>
<tr><td align="center">   <a href="mov/wave_frames/frame_0080.png"><img src="mov/wave_frames/frame_0080.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0085.png"><img src="mov/wave_frames/frame_0085.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0090.png"><img src="mov/wave_frames/frame_0090.png" width="300"></a>    </td> </tr>
<tr><td align="center">   <a href="mov/wave_frames/frame_0095.png"><img src="mov/wave_frames/frame_0095.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0100.png"><img src="mov/wave_frames/frame_0100.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0105.png"><img src="mov/wave_frames/frame_0105.png" width="300"></a>    </td> </tr>
<tr><td align="center">   <a href="mov/wave_frames/frame_0110.png"><img src="mov/wave_frames/frame_0110.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0115.png"><img src="mov/wave_frames/frame_0115.png" width="300"></a>    </td> <td align="center">   <a href="mov/wave_frames/frame_0120.png"><img src="mov/wave_frames/frame_0120.png" width="300"></a>    </td> </tr>
</table>
# #else
|-------------------------------------------------|
|               |                |                |
|-------c---------------c----------------c--------|
|"`080`": "mov/wave_frames/frame_0080.png" | "`085`": "mov/wave_frames/frame_0085.png" | "`090`": "mov/wave_frames/frame_0090.png" |
|"`095`": "mov/wave_frames/frame_0095.png" | "`100`": "mov/wave_frames/frame_0100.png" | "`105`": "mov/wave_frames/frame_0105.png" |
|"`110`": "mov/wave_frames/frame_0110.png" | "`115`": "mov/wave_frames/frame_0115.png" | "`120`": "mov/wave_frames/frame_0120.png" |
|-------------------------------------------------|
# #endif

=== Generating the Entire Table ===

The specific structure of this table also suggest using Mako
to generate the entire table:

!bc pycod
<%
def generate_table(start, end, step, no_of_columns):
    # Heading
    text = ''
    horizontal_rule = '|----|\n'
    text += horizontal_rule
    text += '|  '*no_of_columns + '|\n'
    text += horizontal_rule
    fig_counter = 0
    for counter in range(start, end+1, step):
        fig_counter += 1
        text += '| ' + tfig('%03d' % counter) + ' '
        if fig_counter % no_of_columns == 0:
            text += '|\n'
    text += horizontal_rule
    return text
%>

${generate_table(80, 120, 5, 3)}
!ec
The result is a table like the one above, except that the horizontal rules
and the heading are very short lines (but this is legal syntax -
it just does not look appealing in the Doconce source).

=== Generating the Entire Table in a Native Format via Mako ===

To allow Sphinx and other formats, it is best to generate the entire
table. This can be done either by a Mako function or as a post
process after Doconce has created the output file. We show the Mako
solution here.

!bnotice Tip
A pure Python function Mako is easiest to develop in a seperate
Python program file because Python has better error messages
than Mako. Also, Python has debugging facilities that make the
development of the code much more efficient than writing in Mako.
When the Python function works, it can be inserted in the Doconce
file inside the Mako directives `<%` and `%>`.
!enotice

The Mako function for generating the entire table in LaTeX, HTML,
and Sphinx format goes as follows.

!bc pycod
<%
def generate_native_table(start, end, step, no_of_columns):
    text = ''
    # Heading
    if FORMAT in ("latex", "pdflatex"):
        text += r"""\begin{quote}\begin{tabular}{%s}
\hline
 \\
\hline
""" % ('c'*no_of_columns)
    elif FORMAT in ("sphinx", "rst", "html"):
        text += '<p><table border="1">\n<tr>'
    fig_counter = 0
    latex_columns = []
    for counter in range(start, end+1, step):
        fig_counter += 1
        if FORMAT in ("latex", "pdflatex"):
            latex_columns.append(r'\includegraphics[width=2cm]'\
                    '{mov/wave_frames/frame_%04d.png}\n' % counter)
        elif FORMAT in ("sphinx", "rst", "html"):
            text += '<td align="center"> '\
            '<a href="mov/wave_frames/frame_%04d.png">'\
            '<img src="mov/wave_frames/frame_%04d.png" width="300">'\
            '</a> </td>\n' % (counter, counter)

        if fig_counter % no_of_columns == 0:  # new row
            if FORMAT in ("latex", "pdflatex"):
                text += '   ' + ' & '.join(latex_columns)
                if counter != end:
                    text += r'\\' + '\n'
                latex_columns = []
            elif FORMAT in ("sphinx", "rst", "html"):
                text += '</tr>\n'
                if counter != end:
                    text += '<tr>\n'  # begin new row
    # Footer
    if FORMAT in ("latex", "pdflatex"):
        text += r"""\hline
\end{tabular}\end{quote}
"""
    elif FORMAT in ("sphinx", "rst", "html"):
        text += '</table>\n'
    if FORMAT in ("sphinx", "rst"):
        # Wrap raw HTML code
        lines = text.splitlines()
        text = '\n.. raw:: html\n\n'
        for line in lines:
            text += '    ' + line + '\n'
        text += '\n'
    return text
%>

## Example on call in Doconce source
${generate_native_table(80, 120, 5, 3)}
!ec
One can easily add support for various other formats, such as `pandoc`,
`gwiki`, `mwiki`, etc.
# #if FORMAT in ("latex", "pdflatex", "html")
The output in format the current format is as above.
# #elif FORMAT in ("rst", "sphinx")
The output in the current format is shown below.

.. begin sphinx-figtable-in-html

.. raw:: html

    <p><table border="1">
    <tr><td align="center"> <a href="mov/wave_frames/frame_0080.png"><img src="mov/wave_frames/frame_0080.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0085.png"><img src="mov/wave_frames/frame_0085.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0090.png"><img src="mov/wave_frames/frame_0090.png" width="300"></a> </td>
    </tr>
    <tr>
    <td align="center"> <a href="mov/wave_frames/frame_0095.png"><img src="mov/wave_frames/frame_0095.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0100.png"><img src="mov/wave_frames/frame_0100.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0105.png"><img src="mov/wave_frames/frame_0105.png" width="300"></a> </td>
    </tr>
    <tr>
    <td align="center"> <a href="mov/wave_frames/frame_0110.png"><img src="mov/wave_frames/frame_0110.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0115.png"><img src="mov/wave_frames/frame_0115.png" width="300"></a> </td>
    <td align="center"> <a href="mov/wave_frames/frame_0120.png"><img src="mov/wave_frames/frame_0120.png" width="300"></a> </td>
    </tr>
    </table>

.. end sphinx-figtable-in-html

# #endif

## Could have raw:: latex also above (?)

=== Generating the Entire Table in a Native Format as a Post Process ===

Instead of using Mako as shown above, we can invent our own syntax line
for the table with figures and apply a script to the Doconce output file
to replace the special line with proper native code.
We use the same `generate_native_table` function as above, but this
time in a Python script. In the Doconce source we place a line

!bc
@@@FIGTABLE 80 120 5 3
!ec
which is meant to generate a table with figures where the numbers
correspond to arguments in the `generative_native_table` function.

Suppose we have run

!bc sys
Terminal> doconce format sphinx mydoc
!ec
In the resulting `mydoc.rst` file we have the magic line `@@@FIGTABLE ...`.
Such lines can now be processed in our Python script:

!bc pycod
# read mydoc.rst into the string filestr
pattern = r'@@@FIGTABLE (.+)'
def replacement(m):
    # m is a MatchObject
    args = m.group(1)
    # Convert args to a tuple of words with right type
    args = [eval(arg) for arg in args.split()]
    text = generate_native_table(*args)

filestr = re.sub(pattern, filestr, replacement)
# write filestr back to manual.rst
!ec
This code makes use of a function for creating the replacement string
for the `re.sub` command and demands a knowledge of regular expression
syntax and the workings or `re.sub`. A more plain Python version
goes like this:

!bc pycod
# read mydoc.rst into the string filestr
lines = filestr.splitsplines()
for i in range(len(lines)):
    if lines[i].startswith('@@@FIGTABLE'):
        args = lines[i][10:].strip()
        # Convert args to a tuple of words with right type
        args = [eval(arg) for arg in args.split()]
        text = generate_native_table(*args)
        lines[i] = text
filestr = '\n'.join(lines)  # make one string from all separate lines
# write filestr back to manual.rst
!ec

!bnotice Recommendation
This latter way of inserting specialized native text after Doconce
has generated the output file is easier than using Mako and usually
also safer.
!enotice

!bsummary Lesson Learned
The above examples show different techniques for extending the
Doconce capabilities. The ideas are not restricted to Doconce: using
Mako as a preprocessing step or inserting "magic" lines that you
can later substitute by a script is possible in all types of
ASCII-based documents, e.g., LaTeX, Sphinx, and Markdown.
!esummary

===== Example: Defining a Theorem Environment =====
label{manual:theorem:envir}

Doconce supports only basic formatting elements (headings, paragraphs,
lists, etc.), while LaTeX users are used to fancy environments for, e.g.,
theorems. A flexible strategy is to typeset theorems
using paragraph headings, which will look satisfactorily in all
formats, but add comment lines that can be replaced by LaTeX environments
via `doconce replace`. Theorems can be numbered using a variable in Mako.
Here is an example on raw Doconce code:

!bc
<%
theorem_counter = 4
%>

# begin theorem
label{theorem:fundamental1}
<%
theorem_counter += 1
theorem_fundamental1 = theorem_counter
%>

__Theorem ${theorem_counter}.__
Let $a=1$ and $b=2$. Then $c=3$.
# end theorem

# begin proof
__Proof.__
Since $c=a+b$, the result follows from straightforward addition.
$\Diamond$|$END$
# end proof

As we see, the proof of Theorem ${theorem_counter} is a modest
achievement.
!ec
The `.p.tex` output file now reads
!bc
% begin theorem
label{theorem:fundamental1}


\paragraph{Theorem 5.}
Let $a=1$ and $b=2$. Then $c=3$.
% end theorem

% begin proof
\paragraph{Proof.}
Since $c=a+b$, the result follows from straightforward addition.
$\Diamond$
% end proof

As we see, the proof of Theorem 5 is a modest
achievement.
!ec
Note that with Mako variables we can easily create our own counters,
and this works in any format. In LaTeX we can use both the generated
numbers from Mako variables or we can use the labels.

The next step is to replace the `% begin ...` and `% end ...` lines with
the proper LaTeX expressions in the `.p.tex` file. Moreover, we
need to remove the paragraphs with *Theorem*.
The following Bash script does the job:
!bc shpro
file=mydoc.p.tex
thpack='\\usepackage{theorem}\n\\newtheorem{theorem}{Theorem}[section]'
doconce subst '% insert custom LaTeX commands\.\.\.' $thpack $file
doconce subst '\\paragraph\{Theorem \d+\.\}' '' $file
doconce replace '% begin theorem' '\begin{theorem}' $file
doconce replace '% end theorem' '\end{theorem}' $file
!ec
More heavy editing is better done in a Python script that reads the
`mydoc.p.tex` file and performs string substitutions and regex
substitutions as needed.

The resulting `mydoc.tex` file now becomes
!bc
\usepackage{theorem}
\newtheorem{theorem}{Theorem}[section]

...

\begin{theorem}
\label{theorem:fundamental1}



Let $a=1$ and $b=2$. Then $c=3$.
\end{theorem}

% begin proof
\paragraph{Proof.}
Since $c=a+b$, the result follows from straightforward addition.
$\Diamond$
% end proof

As we see, the proof of Theorem 5 is a modest
achievement.
!ec
Even better, HTML output looks nice as well.

Note that Doconce supports fancy environments for verbatim code via
the `ptex2tex` program with all its flexibility for choosing environments.
Also `doconce ptex2tex` has quite some flexibility for typesetting
computer code.




===== Tools for Writing Doconce Documents =====

 * Emacs (with the modest Doconce syntax highlighting), Vim, Gedit, etc.
 * "TeXMaker": "http://www.xm1math.net/texmaker/" and "Kile": "http://kile.sourceforge.net/" can in theory be adapted to handle Doconce compilation and maybe even Doconce constructs.



===== Debugging =====

Given a problem, extract a small portion of text surrounding the
problematic area and debug that small piece of text. Doconce does a
series of transformations of the text. The effect of each of these
transformation steps are dumped to a logfile, named
`_doconce_debugging.log`, if the to `doconce format` after the filename
is `debug`. The logfile is inteded for the developers of Doconce, but
may still give some idea of what is wrong.  The section "Basic Parsing
Ideas" explains how the Doconce text is transformed into a specific
format, and you need to know these steps to make use of the logfile.



======= Basic Parsing Ideas =======

# avoid list here since we have code in between (never a good idea)

The (parts of) files with computer code to be directly included in
the document are first copied into verbatim blocks.

All verbatim and TeX blocks are removed and stored elsewhere
to ensure that no formatting rules are not applied to these blocks.

The text is examined line by line for typesetting of lists, as well as
handling of blank lines and comment lines.
List parsing needs some awareness of the context.
Each line is interpreted by a regular expression

!bc
(?P<indent> *(?P<listtype>[*o-] )? *)(?P<keyword>[^:]+?:)?(?P<text>.*)\s?
!ec

That is, a possible indent (which we measure), an optional list
item identifier, optional space, optional words ended by colon,
and optional text. All lines are of this form. However, some
ordinary (non-list) lines may contain a colon, and then the keyword
and text group must be added to get the line contents. Otherwise,
the text group will be the line.

When lists are typeset, the text is examined for sections, paragraphs,
title, author, date, plus all the inline tags for emphasized, boldface,
and verbatim text. Plain subsitutions based on regular expressions
are used for this purpose.

The final step is to insert the code and TeX blocks again (these should
be untouched and are therefore left out of the previous parsing).

It is important to keep the Doconce format and parsing simple.  When a
new format is needed and this format is not obtained by a simple edit
of the definition of existing formats, it might be better to convert
the document to reST and then to XML, parse the XML and
write out in the new format.  When the Doconce format is not
sufficient to getting the layout you want, it is suggested to filter
the document to another, more complex format, say reST or
LaTeX, and work further on the document in this format.


===== Typesetting of Function Arguments, Return Values, and Variables =====

As part of comments (or doc strings) in computer code one often wishes
to explain what a function takes of arguments and what the return
values are. Similarly, it is desired to document class, instance, and
module variables.  Such arguments/variables can be typeset as
description lists of the form listed below and *placed at the end of
the doc string*. Note that `argument`, `keyword argument`, `return`,
`instance variable`, `class variable`, and `module variable` are the
only legal keywords (descriptions) for the description list in this
context.  If the output format is Epytext (Epydoc) or Sphinx, such lists of
arguments and variables are nicely formatted.

!bc
    - argument x: x value (float),
      which must be a positive number.
    - keyword argument tolerance: tolerance (float) for stopping
      the iterations.
    - return: the root of the equation (float), if found, otherwise None.
    - instance variable eta: surface elevation (array).
    - class variable items: the total number of MyClass objects (int).
    - module variable debug: True: debug mode is on; False: no debugging
      (bool variable).
!ec

The result depends on the output format: all formats except Epytext
and Sphinx just typeset the list as a list with keywords.

    - module variable x: x value (float),
      which must be a positive number.
    - module variable tolerance: tolerance (float) for stopping
      the iterations.

======= References =======

!bwarning Note
The references below are just for illustrating and testing citation
syntax and not references for explaining parts of the text.
!ewarning

BIBFILE: papers.pub



