[{'choices': [['wrong', 'Helsinki'],
              ['wrong', 'Drammen'],
              ['right', 'Oslo'],
              ['wrong', 'Denmark']],
  'no': 1,
  'question': 'What is the capital of Norway?'},
 {'choices': [['wrong', 'Sidney'],
              ['right', 'Kigali'],
              ['wrong', 'Bonn'],
              ['right', 'Bern'],
              ['right', 'Ottawa'],
              ['wrong', 'New York']],
  'no': 2,
  'question': 'Which of the following cities are capitals?'},
 {'choices': [['wrong', 'Helsinki', 'Helsinki is the capital of Finland.'],
              ['wrong', 'Drammen', 'Drammen is a small city close to Oslo.'],
              ['right', 'Oslo'],
              ['wrong', 'Denmark']],
  'no': 3,
  'question': 'What is the capital of Norway?'},
 {'choices': [['wrong', 'Geroge W. Bush'],
              ['right',
               'Donald Knuth',
               'According to \\href{{http://en.wikiquote.org/wiki/Donald_Knuth}}{Wikiquote},\nDonald Knuth wrote this statement in \\emph{Structured Programming with\nGoto Statements}. Computing Surveys, \\textbf{6}:4,\npp. 261-301, \\textbf{1974}.'],
              ['wrong',
               'Ole-Johan Dahl',
               'Ole-Johan Dahl was a famous Norwegian professor of computer\nscience and together with Kristen Nygaard the inventor of\nobject-oriented programming, but he is not the man behind this\nquote.']],
  'no': 4,
  'question': 'This is a very famous quote:\n\n\n\\begin{quote}\n\\emph{Premature optimization is the root of all evil.}\n\\end{quote}\n\nThis quote is attributed to'},
 {'choices': [['wrong',
               '5.',
               'Good attempt, especially when referring to the following story.\n\n\n\\begin{quote}\nAn anthropologist was asking a primitive tribesman about arithmetic.\nWhen the anthropologist asked, \\emph{What does two and two make?} the\ntribesman replied, \\emph{Five.} Asked to explain, the tribesman said, \\emph{If I\nhave a rope with two knots, and another rope with two knots, and I\njoin the ropes together, then I have five knots.}\n\\end{quote}'],
              ['right',
               '4.',
               'Seems trivial, but once upon a time...\n\n\n\\begin{center}  % inline figure\n  \\centerline{\\includegraphics[width=0.2\\linewidth]{fig/1p1.pdf}}\n\\end{center}'],
              ['wrong',
               'The computation does not make sense when $a$ and $b$ are given without\nunits.',
               'It is indeed possible to add pure numbers without any units.']],
  'no': 5,
  'question': 'Compute the result of $a+b$ in the case $a=2$ and $b=2$.'},
 {'choices': [['wrong',
               'The equation tells that the net outflow of something with\nvelocity $\\bm{u}$ in region is zero.',
               "This is right: integrating (\\ref{cont:eq}) over an arbitrary domain\n$\\Omega$ and using Gauss' divergence theorem, we get the surface integral\n\n\\[ \\int_{\\partial\\Omega}\\bm{u}\\cdot\\bm{n}dS=0,\\]\nwhere $\\bm{n}$ is an outward unit normal on the boundary $\\partial\\Omega$.\nThe quantity $\\bm{u}\\cdot\\bm{n}dS$ is the outflow of volume per\ntime unit if $\\bm{u}$ is velocity."],
              ['wrong',
               'The equation tells that the vector field $\\bm{u}$ is divergence free.',
               'Yes, \\emph{divergence free} is often used as synonym for \\emph{zero divergence},\nand $\\nabla\\cdot\\bm{u}$ is the divergence of a vector field $\\bm{u}$.'],
              ['wrong',
               'The equation implies that there exists a vector potential $\\bm{A}$\nsuch that $\\bm{u}=\\nabla\\times\\bm{A}$.',
               'Yes, this is an important result in vector calculus that is much\nused in electromagnetics.'],
              ['right',
               'The equation implies $\\nabla\\times\\bm{u}=0$.',
               'No, only if $\\bm{u}=\\nabla\\phi$, for some scalar potential $\\phi$,\nwe have $\\nabla\\times\\bm{u}=0$.'],
              ['right',
               'The equation implies that $\\bm{u}$ must be a constant vector field.',
               'No, it is the \\emph{sum} of derivatives of different components of $\\bm{u}$\nthat is zero. Only in one dimension, where $\\bm{u}=u_x\\bm{i}$\nand consequently $\\nabla\\cdot\\bm{u}=du/dx$, the vector field must be constant.']],
  'keywords': ['gradient', 'divergence', 'curl', 'vector calculus'],
  'no': 6,
  'question': "The equation\n\n\\begin{equation}\n\\nabla\\cdot\\bm{u} = 0\n\\label{cont:eq}\n\\end{equation}\nis famous in physics. Select the wrong assertion(s):\n\n\n% --- begin keywords ---\n['gradient', 'divergence', 'curl', 'vector calculus']\n% --- end keywords ---"},
 {'choices': [['wrong',
               'Yes.',
               'Not exactly: \\code{numpy.zeros} creates an array of zeros, not a list.'],
              ['wrong',
               'Yes, provided we write \\code{np} instead of \\code{numpy}:\n\n\\bpycod\nimport numpy as np\nmylist = np.zeros(n)\n\\epycod',
               'No, this is fully equivalent to the original code, so \\code{mylist} becomes\nan array, not a list.'],
              ['right',
               'No.',
               'One would need to do \\code{mylist = [0]*n} or \\code{numpy.zeros(n).tolist()}.']],
  'no': 7,
  'question': 'We want to create a Python list object of length \\code{n} where each\nelement is \\code{0}. Is the following code then what we need?\n\n\\bpycod\nimport numpy\nmylist = numpy.zeros(n)\n\\epycod'},
 {'choices': [['wrong',
               'In Python, the syntax for $t^2$ is \\code{t**2}, not \\code{t^2}, so the\n\\code{u} function contains an error.',
               'True. However, \\code{t^2} will work for integer \\code{t} in Python, but the computation is nonsense in this case since $u(t)$ is supposed to be $t^2$.'],
              ['wrong',
               'The string in the \\code{u} function is a valid doc string.',
               'Yes, a doc string can be any string after the function heading. It can\nhave single quotes \\code{\'...\'}, double quotes \\code{"..."},\ntriple single quotes \\code{\'\'\'...\'\'\'}, or triple double quotes \\code{"""..."""}.\nThe latter is the most popular for doc strings. Recall that triple quotes\nallow the string to span multiple lines.'],
              ['wrong',
               'The output from the program is on a single line, despite two \\code{print}\nstatements.',
               'Yes, because of the comma after the first \\code{print} statement: it suppresses\nthe newline character that is normally appended to \\code{print} statements in\nPython.'],
              ['right',
               'One cannot use \\code{u} both inside the \\code{D} function and in the\nouter calling code (the main program).',
               "Yes, you can, because the \\code{u} argument in the \\code{D} function\n(holding a function)\nis a \\emph{local} variable inside the \\code{D} function. The \\code{u} in the calling\ncode is \\emph{global} variable, holding a function object.\nInside \\code{D}, \\code{u} refers to the\nlocal variable, while in the main program, \\code{u} refers to the\nglobal variable, and the local variable \\code{u} in \\code{D} no longer exists, because\nit was deleted when returning from the function.\nInside \\code{D}, we can actually access the global \\code{u} by \\code{globals()['u']},\nbut that almost never comes to use and is also bad coding."],
              ['wrong',
               'The call \\code{D(lambda x: return 2*x, 2)} is equivalent to defining\n\n\\bpycod\ndef f(x):\n    return 2*x\n\n\\epycod\nand then calling \\code{D(f, 2)}.',
               '\\code{f(x)} is defined as a lambda function, which is a short-hand for\ndefining functions as an expression, in a function call as here, or\nin the right-hand side of an assignment, e.g.,\n\n\\bpycod\nf = lambda x: return 2*x\n\\epycod'],
              ['wrong',
               'There is danger of integer division in the \\code{D} function.',
               'True, here is an example: \\code{D(lambda t: t, dt=1)}. We get\n\\code{(t+1 - t-1)/(2*1)}, which for any integer \\code{t} gives \\code{int/int}\nand hence integer division.'],
              ['wrong',
               'The \\code{D} function computes an approximate derivative of the\nfunction \\code{u(t)}.',
               'Yes, \\code{D} applies a widely used finite difference approximation\nformula to the derivative.'],
              ['wrong',
               'Both calls to \\code{D} results in the exact derivative, provided we\nreplace \\code{t^2} by \\code{t**2}.',
               'Yes, the finite difference approximation used in \\code{D} is exact\nfor quadratic polynomials!']],
  'no': 8,
  'question': '\\bpypro\nfrom math import sin\n\ndef D(u, t, dt=1E-5):\n    return (u(t + dt) - u(t - dt))/(2*dt)\n\ndef u(t):\n    "A quadratic function."\n    return t^2\n\nprint D(u, t=4),\nprint D(lambda x: return 2*x, 2)\n\\epypro\nThe purpose of this program is to differentiate the two mathematical\nfunctions\n\n\\begin{align*}\nu(t) &= t^2,\\\\\nf(x) &= 2x.\n\\end{align*}\nDetermine which of the following assertions that is \\textbf{wrong}.'}]