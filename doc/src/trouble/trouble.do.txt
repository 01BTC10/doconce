TITLE: DocOnce Troubleshooting and FAQ
AUTHOR: Hans Petter Langtangen {copyright} at Center for Biomedical Computing, Simula Research Laboratory & Department of Informatics, University of Oslo
DATE: today

TOC: on

!bwarning Disclaimer
DocOnce has some support for syntax checking.  If you encounter Python
errors while running `doconce format`, the reason for the error is
most likely a syntax problem in your DocOnce source file. You have to
track down this syntax problem yourself. However, DocOnce applies
regular expressions to a large extent for transforming text, and
regular expressions may sometimes lead to undesired results.
Therefore, there is a chance that legal DocOnce syntax is not
treated properly. Section ref{trouble:pitfalls} gives some examples of what
can go wrong.
!ewarning


======= General topics =======

===== How do I debug a DocOnce file that results in a strange error message? =====

Isolate the problem by a ``bisection'' method: split the file in two, compile
both parts, continue with the part that gave the problem, and repeat
the process. This will quickly narrow down the next so you understand
the problem. If you do not understand why the identified piece of text
gives an error message, try to rewrite.

===== GitHub gh-pages will not display files starting with a dot or underscore =====

This is a typical problem related to publishing either splitted HTML documents
or Sphinx versions of documents on GitHub, using a gh-pages branch.
Filenames starting with a dot (as in `._mydoc001.html`) or located in
a directory whose name starts with an underscore (as in `spninx/_static`)
will not be properly shown in HTML if not the root directory of the
gh-pages branch contains a file `.nojekyll`. This file can be empty.
A typical fix is

!bc sys
Terminal> git checkout gh-pages
Terminal> touch .nojekyll
Terminal> git add .nojekyll
Terminal> git commit -am updates
Terminal> git push origin gh-pages
!ec

===== GitHub gh-pages will not display files =====

A common error is to link to addresses starting with `https://github.com`
rather than the required `http://username.github.io/`.

===== ``Blank line is illegal in latex block'', but there is no blank line =====

Are you compiling for `sphinx`, `ipynb`, `pandoc`? In that case,
`align` environments are rewritten as sequences of plain `equation`
environments (since MathJax for these output formats does not support
numbered equations in `align`). If a linebreak `\\` in the `align`
environment appears on its own line, this line will be blank in the
equation environment and cause the error message. Simply move the
linebreak up at the end of the preceding line.

===== A newline in equations (double backslash) becomes single backslash and eats up spaces =====

This is a problem with the Mako preprocessor and files that have been
edited on Windows.  The remedy is to change the newline character on
Windows to that in Unix:

!bc sys
Terminal> doconce subst '\r\n' '\n' mydoc.do.txt
!ec

If you work on Windows, you probably have to avoid using the Mako preprocessor
(it is not used unless you use Mako functions, variables, or control
statements).

===== Preprocess error: unexpected EOF while parsing =====

This error may arise from a syntax error with a colon at the end
of if tests, e.g. `# #if FORMAT == 'html':`. Colon is not used
with Preprocess (but required by Mako: `if FORMAT == 'html':`).

===== When I set a large portion of text in color, only a part of it becomes colored =====

Although DocOnce features a color inline tag (`color`),
this tag will most likely fail for large portions
of text. The reason is that this tag, like most other DocOnce
constructions, relies on a regular expression for being detected.
The regular expression searches for opening and closing braces after
the `color{red}` specification. The closing brace is the first brace
encountered. Therefore, if you have any text containing a right brace
inside the text to be colored, the first right brace will define the
end of the coloring. Here is an example:

!bc do
color{blue}{Here is some text
to be typeset in blue.

===== Here is a new subsection =====
label{sec:subsec}

More text to be typeset in blue, but the right brace in the label
will end the coloring. There is no way out of this except for
moving constructions with braces (`label`, `cite`) out of the
text to be colored.
!ec

===== How can I make use of a native LaTeX environments (example environment for instance)? =====
label{trouble:latex:envir:native}

LaTeX writers often lack their favorite environments, but DocOnce has
a way to define such environments, with corresponding typesetting also
for HTML and all other output formats. See the section "User-Defined
Environments":
"http://hplgit.github.io/doconce/doc/pub/manual/html/manual.html#user-defined-environments"
in the DocOnce manual. It contains all the details for using a
standard example or theorem environment in LaTeX output.

===== How can I create a more tailored code environment in LaTeX than what DocOnce offers? =====

It is easy with *user-defined environments*, see
such an example at the end of the document
"Demonstration of DocOnce support for LaTeX code block environments":
"http://hplgit.github.io/doconce/doc/pub/latexcode/demo.html".
Description of user-defined environments are found in
the "DocOnce manual": "http://hplgit.github.io/doconce/doc/pub/manual/html/manual.html#user-defined-environments".

===== Movies will not play in my broswer =====

Are you using Safari as browser? It will not play Ogg and WebM movies.
A message in a box should notify you about this (right below the movie
player).

===== Reveal slides look strange in the browser =====

Are you using Safari as browser? reveal.js slides work best in
Firefox, Chrome, or Opera.

===== How can I control the vertical spacing in slides? =====

HTML5 and LaTeX slides control the spacings for you. However, sometimes
you really want to add some space. The `<linebreak>` is effective for
this purpose. For example,

!bc do
|bblock (large) So - how to be excellent?
<linebreak>
Excellence is not a planned goal - it is the corollary of
deep passion, very much hard (and exciting!)
work, and *thinking constantly about it*.
|eblock
!ec
is rendered as

!bblock (large) So - how to be excellent?
<linebreak>
Excellence is not a planned goal - it is the corollary of
deep passion, very much hard (and exciting!)
work, and *thinking constantly about it*.
!eblock

The `<linebreak>` is a newline in LaTeX if it has preceding text,
otherwise it is a `\vspace{3mm}`. In HTML, `<linebreak>` is `<br>`.

More vertical space is obtained by repeated use of `<linebreak>`:

!bc
<linebreak>
<linebreak>
<linebreak>
!ec

===== How can I get a copyright on every slide page? =====

HTML formats:
Use the `--copyright=everypage` option in the `doconce split_html` or
`doconce slides_html` commands.

LaTeX Beamer: The copyright is inserted as a `\logo{}` specification, but
this construction does not work in general. Then you cannot get the
copyright on every page. The copyright is inserted as part of the
date command so it is visible on the front page.

Recall that `{copyright...}` specification(s) must be part of the `AUTHOR:`
command in order to get any copyright notice at all.

===== How do I get ``Figure'' written in another language? =====
label{latex:custom:fig:name}

DocOnce documents can be written in any language, but figure captions
typically contain the English word ``Figure''. This must be fixed
by auto-editing the output file after translation by `doconce format`.

In LaTeX you can use your native language package, e.g.,

!bc sys
doconce replace '% insert custom LaTeX commands...' '\\usepackage[norsk]{babel} mydoc.tex
!ec
to get the Norwegian language.

In other formats you have do more manual substitutions:

!bc
doconce replace Figure Figur mydoc.html
doconce replace figure figur mydoc.html
!ec
or both in one command using regular expressions:

!bc
doconce stubst '([Ff]igur)e' '\g<1>' mydoc.html
!ec


===== Spellcheck reports mistakes that I cannot find =====

The `doconce spellcheck` command strips off a lot of text
(math, code, syntax tags) before it starts spellchecking. The
spellchecked text is therefore different from the doconce source!
Fortunately, the file that is actually spellchecked can be examined.
If the spellcheck command is

!bc
doconce spellcheck mydoc
!ec
the file `tmp_stripped_mydoc.do.txt` contains the text that is actually
run through the spellchecker (`ispell`). Search for the misspelled word there and
try to find it in the doconce source code. Very often, strange misspellings
come from a syntax typo that has led to a strange word in the stripped
version.

Wrong typesetting of mathematics can lead to strange errors, e.g.,
misspellings such as `iu` because of some math `f_iu_i` that is
not properly typeset between dollar signs. Here are some useful grep
commands to search for such errors:

!bc
grep --color=auto -E '\biu\b' tmp_stripped_mydoc.do.txt
grep --color=auto -E ' iu' tmp_stripped_mydoc.do.txt
grep --color=auto -E 'iu ' tmp_stripped_mydoc.do.txt
grep --color=auto -E 'iu' tmp_stripped_mydoc.do.txt
!ec


===== Spellcheck reports a lot of mistakes related to LaTeX math =====

The `doconce spellcheck` command should ignore LaTeX math, but if
the dollar signs for inline math are not correct (one missing, for instance),
a lot of math enters the text to be spellchecked. Invoke the
relevant `tmp_missing_*` file and find the first math-style expression that
is reported as misspelling. Open the corresponding stripped file,
`tmp_stripped_*`, which is supposed to have all the math stripped
away, and search for the misspelling. When you find it, you will see
that there are math expressions in the stripped file that should not
be there. (Because of wrong begin and end signs around math expressions
ordinary text has instead been stripped away. This way, a missing dollar
sign can lead to hundreds of misspellings.)
Find the problem in the corresponding DocOnce file and correct it.
A similar error can be caused by wrong matching
of equation environments between `!bt` and `!et`.

===== Text between subexercises are moved =====

If you insert text between a `!esubex` and the next `!bsubex`, this
text is moved before all the subexercises. This is a feature, not a
bug (exercises have certain elements: main text, subexercises, hints,
etc. that are typeset in a specific order, which may be different from
what appears in the DocOnce source file). If you need a comment
between two subexercises, just place the comment at the end of the
previous subexercise.

===== DocOnce aborts because of a syntax error that is not an error =====

DocOnce searches for typical syntax errors and usually aborts the
execution if errors are found. However, it may happen,
especially in verbatim blocks, that DocOnce reports syntax errors
that are not errors. To continue execution, simply add the
`--no_abort` option on the command line. You may send an email
to the DocOnce author at `hpl@simula.no` and report the problem.

===== Figure captions are incomplete =====

If only the first part of a figure caption in the DocOnce file is seen
in the target output format, the reason is usually that the caption
occupies multiple lines in the DocOnce file. The figure caption must
be written as *one line*, at the same line as the FIGURE keyword.

===== Problems with boldface and emphasize =====

Two boldface or emphasize expressions after each other are not rendered
correctly. Merge them into one common expression.

===== Links to local directories do not work =====

Links of the type
!bc
see the "examples directory": "src/examples"
!ec
do not work well. You need to link to a specific HTML file:
!bc
see the "examples directory": "src/examples/index.html"
!ec
We recommend to put all files you link to in a `_static` directory
if you intend to use the `sphinx` output. This guarantees that all
your files are collected in the Sphinx directory tree bundle.
With plain `html` output only, you can link to whatever, but remember
to move all files you link to if you move the primary `.html` file.

===== Links are not typeset correctly =====

Not all formats will allow formatting of the links. Verbatim words
in links are allowed if the whole link is typeset in verbatim:
!bc
see the directory "`examples`": "src/examples/index.html".
!ec
However, the following will not be typeset correctly:
!bc
see the "`examples`": "src/examples/index.html" directory.
!ec
The back-ticks must be removed, or the text can be reformulated as
in the line above it.


===== Inline verbatim code or boldface is not detected when used with a footnote =====

There must be a space between the verbatim code (or boldface words)
and the footnote bracket:

!bc do
The construction `def f(x,y):`[^whitespace] is standard.

[^whitespace]: Well, a space before the `y` argument, as in `f(x, y)`,
would be the standard.
!ec

===== Inline verbatim code is not detected =====

Make sure there is a space before the first back-tick.

===== Inline verbatim text is not formatted correctly =====

Make sure there is whitespace surrounding the text in back-ticks.

===== Strange non-English characters =====

The former reason for this problem is that DocOnce could only work with latin1
(ISO-8859) encoding and not UTF-8. After May 2013, DocOnce applies
UTF-8 both for HTML and LaTeX.

Check the encoding of the `.do.txt` file with the Unix `file` command
or with
!bc
Terminal> doconce guess_encoding myfile.do.txt
!ec
If the encoding is UTF-8, convert to latin1 using either of
the Unix commands
!bc
Terminal> doconce change_encoding utf-8 latin1 myfile.do.txt
Terminal> iconv -f utf-8 -t latin1 myfile.do.txt --output newfile
!ec


===== Wrong Norwegian characters =====

When DocOnce documents have characters not in the standard ASCII set,
the format of the file must be LATIN1 and not UTF-8. See
the section "Strange non-English characters" above for how to
run `doconce change_encoding` to change the encoding of the DocOnce file.

===== Too short underlining of reST headlines =====

This may happen if there is a paragraph heading without
proceeding text before some section heading.


===== Found `!bt` but no tex blocks extracted (BUG) =====

This message points to a bug, but has been resolved by removing blank lines
between the text and the first `!bt` (inserting the blanks again did not
trigger the error message again...).

===== Examples are typset with environment delimiters visible =====

If you see an Example section containing `!bsubex`, `!bsol`, or other
begin and end tags for environments, it means that you have intended
to typeset examples as exercises, but forgotten the command-line
option `--examples_as_exercises`. The text in the example is typeset
as is unless this option is included.

===== Emacs editing does not work properly because of "regexp overflow" =====

Sometimes the Doonce editing mode (see the
*Emacs DocOnce Formatter* section in the manual) in Emacs
leads to an error message ending with ``overflow in regexp matcher''.
This error is due to some regular expression used in the DocOnce editing
mode. The remedy is to split the file into smaller pieces and include
the pieces using the `preprocess` directive `#include "piece.do.txt"`.
The error message comes with the DocOnce file contains too much text
for Emacs to handle.

===== My machine hangs if I have many movies =====

DocOnce has no limits on the amount of movies. When the output is
in HTML, one big HTML file may contain too many movies (local movie
files or embedded YouTube movies) for the browser to handle.
The remedy is to split the document into smaller pieces by inserting

!bc
!split
!ec
for every new page. After `doconce format html mydoc`, run
`doconce split_html mydoc.html` to get the document split into
a main document `mydoc.html` and pieces `._mydocXXX.html`, where
`XXX` stands for three digits (`000`, `001`, `002`, and so forth).

===== How can I use quotes in a link? =====

Links are typeset inside double quotes, but DocOnce applies double backticks
and double single quotes to typeset quotes, so the right form is

!bc
"This is a ``link text'' to google": "http://google.com".
!ec
It appears as (typset in a `quote` admon):

!bquote
"This is a ``link text'' to google": "http://google.com".
!equote

===== Conversion from DocOnce to Google Docs =====

 * Transform the DocOnce document to HTML, upload to Google Drive,
   right-click the file and open as Google Docs.
 * It might be necessary to adjust formatting, e.g., insert an extra
   line between paragraphs.
 * MathJax code is not converted to the Google Docs LaTeX counterpart
   and appears verbatim.
 * Pygmentized computer code and admons look fine.

===== Convesion from Google Docs to DocOnce =====

 * Save as HTML file and use Pandoc to convert to Markdown.
   Use the `--markdown` and `--md2do_output=` options to
   `doconce format to convert to DocOnce.
 * Lists in Markdown must be intended.
 * Notes in Google Docs become (potentially many) footnotes.
   Some tailored editing is necessary.

This solution is not much explored and more text transformations from
Pandoc-generated Markdown is certainly needed.

===== Are there any tools for shared online writing of DocOnce documents? =====

In theory, URL: "http://draftin.com" and URL: "https://stackedit.io"
can be used to share Markdown documents and these can be transform
to and from DocOnce documents. Tested to a little degree, but may
work for very simple documents (sections, lists, code - no labels, refs,
math, admons, code copied from file).
Not all of Extended Markdown is interpreted by DocOnce, and DocOnce
transforms to Panddoc-extended Markdown, not the Extended Markdown
used by these sites.


===== Examples on seemingly legal syntax that fails =====
label{trouble:pitfalls}

Since DocOnce applies regular expressions to a large extent to translate
the input source to the output format, limitations of regular expressions
may lead to unexpected results. Here are some examples on what can go wrong.

=== Double bold/italic ===

Two strings with bold or emphasize after each other will not work:

!bc do
# Not properly interpreted:
Here is a _bold_ _word_.
# This is how to do it:
Here is a _bold word_.

# Same with emphasize/italic:
Cannot write *two emphasized* *words*,
but must write *two emphasized words*.
!ec
The wrong syntax implies that one of the texts inside
bold/italic tags will appear with DocOnce syntax in the output.

=== Mix of bold/italic and math ===

Trying to typeset a mixture of text and mathematics or code in boldface or
emphasized font fails:

!bc do
_It is important that $u_1=2$!_
*It is important that `a*b=b*a` in any computer language*.
!ec
The reason is that boldface or emphasize text cannot contain the
special characters dollar sign and backtick. However, if these
were allowed, the above examples would fail because the underscore
in `$u_1=2$` would mark the end of the boldface text. Similarly,
the `*` in `a*b` would mark the end of the emphasized text.
Such problems are avoided by *only using plain text inside
emphasize or boldface tags*:

!bc do
_It is important that_ $u_1=2$!
*It is important that* `a*b=b*a` *in any computer language*.
!ec

Another similar example is the mix of `color{col}{text}` syntax
with braces inside the text. For example,

!bc do
color{blue}{However, here a blue color specification
fails: $\frac{1}{2}\omega^2$.}
!ec
The text part is interpreted as string with `However` and lasting up
to the first right brace, which is in `\frac{1}`. A remedy is, as above,
to only use plain text inside the text part of the color specification
and use a `\textcolor` command inside the mathematics:

!bc do
color{blue}{However, here a blue color specification
fails:} $\textcolor{red}{\frac{1}{2}\omega^2}$.}
!ec

Mathematics and code in blocks are invisible when inline tagging is
interpreted and translated. Therefore, a specification as follows
works well:

!bc do
color{red}{This equation,

|bt
\begin{equation}
a = b
label{eq1}
\end{equation}
|et
is meant to be in red and it works.}
!ec

The rules are that `*text*`, `_text_`, and `color{color}{text}`
employs a simple rule: `text` lasts up to the first end-tag
character (`*`, `_`, and `}` above), but code and math blocks
do not count.

===== How can I make pressbooks.com books from DocOnce? =====

URL: "http://pressbooks.com" supports HTML input with WordPress LaTeX mathematics,
so the easiest way is to compile DocOnce to HTML with the `--wordpress`
option, put the file on the web somewhere, click *Utilities - Import*
in pressbooks.com, then choose HTML input, write the URL, and upload.

Note that WordPress LaTeX cannot refer to equations using labels!
This is a major problem with pressbooks.com.

===== How can I produce ePub books from DocOnce? =====
label{trouble:epub}

DocOnce has no direct translation to ePub, but one can apply a script
"`ebookmaker.py`": "https://github.com/hplgit/ebookmaker" to translate
a set of split HTML files to ePub. Bootstrap styles with mathematics
and code come out very nice in ePub this way.
The script needs a JSON file. If `mydoc.do.txt` is the DocOnce file
and `._mydoc*.html` the set of split HTML files after translation
to HTML, the JSON file may look like this:

!bc
{
    "filename" : "mydoc",
    "title" : "Title of the document",
    "authors" : [
        {
            "name" : "Hans Petter Langtangen",
            "sort" : "Langtangen, Hans Petter"
        }
    ],
    "rights" : "Public Domain",
    "language" : "en",
    "publisher": "hpl",
    "subjects" : [ "Science" ],
    "contributors" : [
        {
            "name" : "Hans Petter Langtangen",
            "role" : "author"
        }
    ],
    "identifier" : {
        "scheme" : "URL",
        "value" : "http://somewhere.net"
    },
    "contents" : [
        {
            "type" : "text",
            "source" : "._mydoc*.html"
        }
    ],
    "toc" : {
        "depth" : 2,
        "parse" : [ "text" ],
        "generate" : {
            "title" : "Index"
        }
    }
}
!ec
Just edit this file to your needs, save it as `mydoc.json` and run
`epubmaker.py mydoc.json` to produce `mydoc.epub`.
Read in "Calibre": "http://calibre-ebook.com/"
on computers or use ebook readers on phones and tablets.

===== What about non-English languages and DocOnce? =====
label{trouble:non_English}

DocOnce can handle non-English language, although most of its use has
concerned documents in English. When writing in languages with
non-ASCII characters, remember to use the command-line option
`--encoding=utf-8`.
Some other points of importance:

 * The abstract requires a heading Summary or Abstract. This heading
   must be substitued by the appropriate word after translation.
 * LaTeX files should make use of packages and options for the language
   in question such that LaTeX-generated headings get the right
   language-specific wording.
   Use `doconce replace` or `doconce search` modify the
   `.tex` file (see the Bash script referred to below for examples).
 * Some DocOnce-generated headings are in English, e.g.,
   ``Table of Contents'', which must be edited by `doconce replace`.
 * For Sphinx output, two edits in files in the Sphinx root directory
   (`sphinx-rootdir` by default) are necessary (see Bash script below for
   examples on autoediting):
   * Insert right language in `conf.py`: `language = 'nb_NO'` for Norwegian
   * Edit headings in `index.rst`: ``Contents:'' and
     ``Tables and indices'', to what the language demands
   * Unfortunately, ``Page contents'', ``Next page'', and
     ``Previous page'' remains in English
     in the navigation area (these can, of course, be replaced in all
     the HTML files generated by Sphinx in `_build/html` - recall to edit
     also all the files starting with a dot if you have split the document
     (`doconce split_rst`))

There is an example of a document in Norwegian in the DocOnce repository
where we do all necessary adjustments mentioned above:

 * "DocOnce source": "https://github.com/hplgit/doconce/blob/master/doc/src/locale/Norwegian.do.txt"
 * "Bash script for compiling the DocOnce source": "https://github.com/hplgit/doconce/blob/master/doc/src/locale/make.sh"
 * "PDF": "http://hplgit.github.io/doconce/doc/pub/locale/Norwegian.pdf"
 * "HTML": "http://hplgit.github.io/doconce/doc/pub/locale/Norwegian.html"
 * "Sphinx": "http://hplgit.github.io/doconce/doc/pub/locale/sphinx/index.html"

===== How do I insert a copyright? =====
label{trouble:copyright}

See the "Copyright section of the DocOnce manual": "http://hplgit.github.io/doconce/doc/pub/manual/html/manual.html#copyright".

=== Other formats ===

An error message is provided.

===== Lists look wrong =====

It is very important to be accurate with white space in lists.
There must be exactly *one blank* between the `o` or `*` that
starts an item and the following text, and multiple lines in an
item must be perfectly aligned. Here are some typical errors:

!bc do
 o a rectangular pulse
 o  a Gaussian pulse
 o one period of a cosine pulse
 o half a period of
  a cosine pulse
!ec
Problem: `a Gaussian pulse` is not properly aligned, `a cosine pulse` on
the last line is not properly aligned. The correct formatting is

!bc do
 o a rectangular pulse
 o a Gaussian pulse
 o one period of a cosine pulse
 o half a period of
   a cosine pulse
!ec

======= Preprocess/Mako =======

===== List important things to remember when programming Mako =====

 * Keep Python code more than a few lines *outside* of the DocOnce
   file, and use `# #include` to include the code. See
   the *Debugging Python code in Mako* section in the manual for
   how to do it.
 * Do not use continuation character (backslash) in Python code.
 * When a Mako error refers to a line in the text, invoke the
   file that Mako sees: `tmp_preprocess__mydoc.do.txt` if
   the DocOnce file has name `mydoc.do.txt`.
 * Use double `##` (Mako comment) to comment out Mako calls
   to functions or Mako variables.

===== The Mako preprocessor is seemingly not run =====

If you have lines starting with `%` inside code segments (for example,
SWIG code or Matlab comment lines), the Mako preprocessor will crash
because it thinks these lines are Mako statements. DocOnce detects
this problem and avoids running Mako.  Examine the output from
DocOnce: warnings are issued if Mako is not run.

===== The Mako preprocessor gives syntax error in Python code =====

The information with respect to syntax errors in Python code is
sparse. It is recommended to move the Python code to separate files
and test it with the ordinary Python interpreter. See the
section *Debugging Python code in Mako* in the DocOnce manual.

===== The Mako preprocessor gives strange error messages =====

If you to a little syntax error in Mako, the consequences can be
quite unpredictable. Especially, if you forget curly braces around
variables or function calls, the forthcoming text is processed as
part of the Mako command. Pay attention to the line number reported
by Mako: this is the line number after Preprocess has processed
the DocOnce document, so you need to load `tmp_preprocess__mydoc.do.txt`
and go to the right line in that file to see the Mako problem
(here the DocOnce document is named `mydoc.do.txt`).

Look through the specific Mako problems
reported below, and if they do not bring you to a solution of
the problem, search for all occurences of dollar, left curly brace
and check the syntax carefully. Likewise, check the syntax of
Mako if-tests.

Another widely used technique is to copy out small parts of
the complete document to a separate file and run `doconce format`.
In this way you can easier see which parts of the document that
work and where the error suddenly appears.

!bnotice Tip: Compile your DocOnce document frequently
The best means against Mako problems is to run `doconce format`
often. Combined Git, you can take
a `git diff` to see what you have recently changed and get an idea
what can be wrong.
!enotice


===== The Mako preprocessor is fooled by DocOnce text =====

Here are possible problems for Mako:

 * Strings with `'T<%.1f'` look as openings of Mako blocks (`<%`); change
   to `'T < %.1f'` to avoid this confusion.

===== The Mako preprocessor claims a variable is undefined =====

## Must read mako syntax from file to avoid disturbing mako...

Very often such errors are related to typos when using Mako
variables or functions, or correct yet undesired LaTeX syntax.
For example,

@@@CODE .mako_problem1.do.txt
is valid LaTeX, but
the dollar sign and curly braces confuse Mako. Rewrite such
mathematics. It is wise to not use `${` anywhere in LaTeX mathematics.
Create a newcommand if there are no other possible rewritings.
A known common problem is `${}^+$` type of indication of superscripts.
A suggested rewrite is `$\,{}^+$`.

The error message will ask you to rerun `doconce` with
`--mako_strict_undefined`, which will display the variable that is
confusing Mako. Sometimes the variable is printed, sometimes a totally
different name is said to be undefined. This is confusing, because
then you have to use the bisection method below to narrow down the
problem yourself.

Do not continue to use `--mako_strict_undefined` while you are
debugging because this variable or a new variable will then always be
undefined in that mode.  Rerun without `--mako_strict_undefined` to
see if the problem is gone. If not, try the option again, and if no
progress, use `# #ifdef` directives to comment out large portions of
the text and apply a bisection procedure to locate where the Mako
problem is (without `--mako_strict_undefined`).  A bisection procedure
means that you comment out the last half, find in which half the
problem is, comment out half of that half, find in which half the
problem is, and so on. The procedure converges pretty quickly, even
for large books.

===== Something goes wrong in the preprocessing step =====

You can examine `tmp_preprocess__filename` and `tmp_mako__filename`,
where `filename` is the complete name of the DocOnce file, to see
what the preprocessors actually to and if something is wrong in these
files before DocOnce starts translating the text.
One or both of those files may be missing, but examine the beginning
of the output from DocOnce to see exactly which preprocessors are run
and on which files.

===== Preprocessor directives do not work =====

Make sure the preprocessor instructions, in Preprocess or Mako, have
correct syntax. Also make sure that you do not mix Preprocess and Mako
instructions. DocOnce will then only run Preprocess.

======= Code or Tex Blocks =======

===== Too long lines in math blocks =====

A common problem in LaTeX (not directly related to DocOnce) is too long lines
in math blocks. The trick is to use the `align` or `align*` environment
and introduce newlines with `\nonumber\\` to break up lines (without introducing
an equation number). Typically,

 o Insert `\nonumber\\` where you see a linebreak should occur.
 o Start next line with `&\quad` such that the continuing line starts slightly to the right of the alignment character used to align the equations. If you have only one equation, find some point where you insert `&` and just start the next line with `&` - no `\quad` displacement to the right is needed in that case.
 o `\left(` and `\right)` (and similar constructions for automatic adjustment of the sizes of parentheses) do not work accross linebreaks. This means that you must replace `\left(` by (e.g.) `\biggl(` unless there is a corresponding `\right` on the same line. Whether to choose `\biggl`, `\bigl`, or `\Biggl` depends on the desired size of the the parenthesis.

===== Code or math block errors in reST =====

First note that a code or math block must come after some plain
sentence (at least for successful output in reST), not directly
after a section/paragraph heading, table, comment, figure, or
movie, because the code or math block is indented and then become
parts of such constructions. Either the block becomes invisible or
error messages are issued.

Sometimes reST reports an "Unexpected indentation" at the beginning of
a code block. If you see a `!bc`, which should have been removed when
running `doconce format sphinx`, it is usually an error in the DocOnce
source, or a problem with the rst/sphinx translator.  Check if the
line before the code block ends in one colon (not two!), a question
mark, an exclamation mark, a comma, a period, or just a newline/space
after text. If not, make sure that the ending is among the
mentioned. Then `!bc` will most likely be replaced and a double colon
at the preceding line will appear (which is the right way in reST to
indicate a verbatim block of text).

===== Strange errors around code or TeX blocks in reST =====

If `idx` commands for defining indices are placed inside paragraphs,
and especially right before a code block, the reST translator
(rst and sphinx formats) may get confused and produce strange
code blocks that cause errors when the reST text is transformed to
other formats. The remedy is to define items for the index outside
paragraphs.

===== Something is wrong with a verbatim code block =====

Check first that there is a "normal" sentence right before
the block (this is important for reST and similar
"ASCII-close" formats).

===== Code/TeX block is not shown in reST format =====

A comment right before a code or tex block will treat the whole
block also as a comment. It is important that there is normal
running text right before `!bt` and `!bc` environments.

===== Verbatim code blocks, figures and admons inside lists look ugly =====

Avoid verbatim code blocks, figures, and admons
inside lists (it makes life easier!).
Instead, use paragraph headings, say

__Step 1.__
Describe step. Add figure, code block, admon, etc.

__Step 2.__
Describe next step.

If you miss the automatic numbering of items in enumerated lists, you
can simulate that with a Mako variable:

!bc do
<% counter = 0 %>

<% counter += 1 %>
__Step ${counter}.__
Describe step. Add figure, code block, admon, etc.

<% counter += 1 %>
__Step ${counter}.__
Describe next step.
!ec

===== LaTeX code blocks inside lists look ugly =====

Same solution as for computer code blocks as described in the
previous paragraph. Make sure the `!bt` and `!et` tags are in column 1
and that the rest of the non-LaTeX surrounding text is correctly indented.
Using paragraphs instead of list items is a good idea also here.

===== LaTeX code appears prior to paragraph headings =====

If you have a paragraph heading and then code right after,

!bc do
__Heading.__

|bc pycod
def f(x):
    return 42
|ec
!ec
the generated LaTeX code is correct, but it is translated to PDF in
a wrong way such that the heading appears *after* the code.
A remedy is to insert some text after the paragraph heading.
See also Section ref{trouble:bsol:code} - it is the same problem.

===== Numbered equations in exercise solutions change the equation numbers in the text... =====

This is a problem if you produce versions with and without solutions,
see the heading ``Numbering of Extra Equations in Solutions'' in the
DocOnce manual for description of the problem and its solutions.


======= reST/Sphinx =======

===== Sphinx directory generation aborts with ``label empty or too long'' =====

This is a strange error that might arise from a too long title of the document.
The solution is to specify a shorter title when running `doconce sphinx_dir` (i.e., to avoid getting the title from the original `.do.txt` document):

!bc sys
Terminal> doconce sphinx_dir title="Short Title" \
          authors="A. B. Crunch" theme=pyramid mydoc
!ec

===== Title level inconsistent =====

reST does not like jumps in the levels of headings. For example, you cannot
have a `===` (paragraph) heading after a `=======` (section) heading without
a `====` (subsection) heading in between.

===== Subsection headings appear at the level of sections in the table of contents =====

This is a problem that arises if you split a Sphinx document at the
subsection level. Then the subsection is the highest level in that part,
and it will then move up to the section level in the table of contents
(this is done by Sphinx, and DocOnce has no influence on the process).

After Oct 2014, DocOnce ignores by default the `!split` commands that the
user has inserted and performs a split at the highest section level,
which means that chapters constitute the parts of the
document, if chapters are present, otherwise the sections represent the
different parts. If this behavior is not desired and the user's `!split`
commands are to be respected, provide the command-line argument
`--sphinx_keep_splits` in the `doconce format` command.

===== Lists do not appear in .rst files =====

Check if you have a comment right above the list. That comment
will include the list if the list is indentend. Remove the comment.

===== Error message "Undefined substitution..." from reST =====

This may happen if there is much inline math in the text. reST cannot
understand inline LaTeX commands and interprets them as illegal code.
Just ignore these error messages.

===== Warning about duplicate link names =====

Link names should be unique, but if (e.g.) "file" is used as link text
several places in a reST file, the links still work. The warning can
therefore be ignorned.

===== Inconsistent headings in reST =====

The `rst2*.py` and Sphinx converters abort if the headers of sections
are not consistent, i.e., a subsection must come under a section,
and a subsubsection must come under a subsection (you cannot have
a subsubsection directly under a section). Search for `===`,
count the number of equality signs (or underscores if you use that)
and make sure they decrease by two every time a lower level is encountered.

===== No code environment appears before "bc ipy" blocks =====

The `!bc ipy` directive behaves this way for `sphinx` output because
interactive sessions are automatically handled. If this is not
appropriate, shift to `!bc cod` or another specification of the
verbatim environment.

======= LaTeX =======

===== Lines are too long =====

Too long lines are often handled with a forced newline like `\\` in
LaTeX, but this double backslash does not look good in other formats
when you use DocOnce. Try to rewrite the text such that LaTeX
naturally avoids too long lines. Inline verbatim can easily force
LaTeX to extend the line width, but see if you can use other words to
move the inline verbatim to the left or to the next line.

A last resort is to use the preprocessor and test on ``FORMAT == 'pdflatex'`
and then use the double backslash.

===== Sphinx and HTML show pygmetized code, but not LaTeX =====

You have to explicitly select the `minted` environment when running `ptex2tex`
to get pygmentized computer code in LaTeX:

!bc sys
Terminal> doconce ptex2tex mydoc envir=minted
Terminal> pdflatex -shell-escape mydoc
!ec

===== LaTeX error because of underscores =====

LaTeX requires prefixing underscores by a backslash. Either typeset
words with underscores in inline verbatim text (so you do not need
the backslash) or use the preprocessor
to insert LaTeX-specific text with a backslash, e.g.,

!bc do
Here is a word underscore:
%% if FORMAT in ('latex', 'pdflatex'):
my\_word
%% else
my_word
%% endif
!ec
Usually, inline verbatim text is way to go with underscores anyway.

===== LaTeX does not like underscores in URLs =====

Suppose you have a URL reference like

!bc
..which can be found in the file "my_file.txt":
"http://some.where.net/web/dir/my_file.txt".
!ec
LaTeX will stop with a message about a missing dollar sign. The reason
is that underscores in link texts need to be preceded by a backslash.
However, this is incovenient to do in the DocOnce source since the
underscore is misleading in other formats.
The remedy is to format the link text with inline verbatim tags (backticks):
!bc
..which can be found in the file "`my_file.txt`":
"http://some.where.net/web/dir/my_file.txt".
!ec
Verbatim text in links works fine with underscores.

===== Inline verbatim fails in admon headings =====

A known problem is to have the word

!bc
\Verb
!ec
in (admon) headings. Otherwise inline verbatim should work, both in
section headings and admon headings.

===== How can I have unnumbered sections? =====

Use the `--section_numbering=off` option:

!bc sys
Terminal> doconce format pdflatex mydoc --section_numbering=off
!ec

===== LaTeX suddenly places figures differently =====

Until August 25, 2015, the figure environment applied the `[t]` (top) option,
but since then the `[h]` option is used. Of even greater influence are the
`topfraction`, `bottomfraction`, and `textfraction` parameters in the `.tex`
file. See the ``Figures'' section in the manual for more information and how
to customize the placement of figures.

===== I want figure references with page number too =====
label{trouble:figref:mako}

A DocOnce user wanted figure references to be as follows in LaTeX:

!bc latexcod
% if current page is different from figure page:
... Figure \ref{my:fig} on page \pageref{my:fig}.
% if current page is the same as the figure page:
... Figure \ref{my:fig}.
!ec
All other formats should emit the standard treatment of a DocOnce
figure reference with `ref`.

=== Quick solution with the `varioref` package ===

DocOnce actually generates such references in LaTeX output
if you request the `varioref`
package: `--latex_packages=varioref` (the standard `ref` command
is now replaced by `\vref`, except in equation references).

=== Manual solution (or a good example on what Mako can do) ===

Here is an implementation using if-else tests in LaTeX and
internal variables. Unfortunately, this solution is not reliable
because it uses the `\thepage` variable in LaTeX (for the page number
of the current page) and this variable is unreliable. The solution
above (using `\vref` and the `varioref` package) is much better.
However, the manual solution is a good example on how to use Mako
to do seemingly complicated things.

The above problem can be solved by some Mako programming and
usage of the LaTeX packages `ifthen` and `refcount`.

!bc do
<%
def figref(label):
    text = 'Figure ref{%s}' % label
    if FORMAT in ('latex', 'pdflatex'):
	text += r'\ifthenelse{\equal{\thepage}{\getpagerefnumber{%s}}}{}{ on page \pageref{%s}}' % (label, label)
    return text
%>

FIGURE: [myfigfile, width=600 frac=0.8] My figure. label{my:fig}

We refer to ${figref('my:fig')}.

...
# Much later
..., as seen in ${figref('my:fig')}.
!ec
The first reference is on the same page as the figure, and LaTeX should
not write the page number, while the second reference is on another
page so both the figure number and the page number should appear in
the output. All other formats have a standard figure reference (translated
to a figure number in HTML and to the caption in Sphinx).

The LaTeX output is something like this:

!bc latexcod
\begin{figure}[h] % my:fig
  \centerline{\includegraphics[width=0.8\linewidth]{myfigfile.png}}
  \caption{
  My figure. \label{my:fig}
  }
\end{figure}
%\clearpage % flush figures sec:fig

We refer to Figure~\ref{my:fig}\ifthenelse{
\equal{\thepage}{\getpagerefnumber{my:fig}}}{}{ on page \pageref{my:fig}}.

...
% Much later
..., as seen in Figure~\ref{my:fig}\ifthenelse{
\equal{\thepage}{\getpagerefnumber{my:fig}}}{}{ on page \pageref{my:fig}}.
!ec

===== Error when running latex: You must have 'pygmentize' installed =====

This message points to the use of the minted style for typesetting verbatim
code. You need to include the `-shell-escape` command-line argument when
running `latex` or `pdflatex`:
!bc sys
Terminal> latex -shell-escape file mydoc.tex
Terminal> pdflatex -shell-escape file mydoc.tex
!ec
Using `doconce ptex2tex` will turn on the minted style if specified as
environment on the command line, while using `ptex2tex` requires the
preprocessor option `-DMINTED` to turn on the minted package.
When this package is included, `latex` or `pdflatex` runs the
`pygmentize` program and the `shell-escape` option is required.

===== Why are the LaTeX section headings smaller than normal? =====

DocOnce inserts a special command to make the headings
more compact:

!bc
\usepackage[compact]{titlesec}
!ec
as explained in the "`titlesec`": "http://www.ctex.org/documents/packages/layout/titlesec.pdf" package documentation.
To retrieve the standard LaTeX headings, comment out this line or remove it:

!bc sys
Terminal> doconce format pdflatex mydoc
Terminal> doconce subst '\\usepack.+\{titlesec\} '' mydoc.p.tex
!ec

You can easily make the headings even smaller than the normal font
by replacing `[compact]` by `[compact,small]` as parameter specification
for `titlesec`.

===== I get LaTeX compilation errors about "shadedquoteBlue" in code blocks in exercises =====

When using colored boxes for code in LaTeX, a code snippet is needed
in the ordinary running text *before* code snippets inside exercises, problems,
or projects. This is a kind of bug in DocOnce that is challenging to fix.
It is usually only a problem when writing documents mainly containing
exercises, problems, or projects.

===== I get compilation error due to pause commands =====

The `|\pause|` commands are intended for popping up code segments
in slides. If you compile the document without having run `doconce slides_beamer` first, standard LaTeX have a problem with `|\pause|`. The remedy is
to just remove these commands by

!bc sys
Terminal> doconce subst '\|\\pause\|\n' '' mydoc.tex
!ec
before running `pdflatex mydoc`.

===== The cell structure in slides does not work for me ... =====

Common errors:

 * Empty cells? No cell can be empty. Just insert a comment `# Empty cell`
   to make it non-empty.
 * Wrong numbering of the cells. They go 00, 01, 02, 10, 11, etc.

Also, text outside the slidecell boxes *are not shown* in the slide.
Everything you want to see must be inside the cells. Use `<linebreak>`
repeatedly to insert vertical spacings inside cells.


===== Can I have LaTeX figures with shadows? =====

This is easy by including the `fancybox` and `graphicx` packages
and wrapping all `\includegraphics` in a shadow box:

!bc sys
Terminal> doconce format pdflatex mydoc
Terminal> doconce replace \
          'microtype}', 'microtype,fancybox,graphicx}' mydoc.p.tex
Terminal> doconce subst '(\\includegraphics\[.+\}\})' \
          '\\shadowbox{\g<1>}' mydoc.p.tex
!ec

===== How can I use my fancy LaTeX environments? =====

See the section *Example: Defining a Theorem Environment* in
the DocOnce manual for how to make a custom
theorem environment also in DocOnce, without using implementations
restricted to LaTeX. See also Section ref{trouble:latex:envir:native}.


===== The LaTeX file does not compile =====

If the problem is undefined control sequence involving
!bc
\code{...}
!ec
the cause is usually a verbatim inline text (in back-ticks in the
DocOnce file) spans more than one line. Make sure, in the DocOnce source,
that all inline verbatim text appears on the same line.

===== The LaTeX Beamer file does not compile =====

Make sure you have a `!split` before every slide heading.


===== Inline verbatim gives error  =====

Check if the inline verbatim contains typical LaTeX commands, e.g.,

!bc
some text with `\usepackage{mypack}` is difficult because
ptex2tex will replace this by \code{\usepackage{mypack}} and
then replace this by
{\fontsize{10pt}{10pt}\verb!\usepackage{mypack!}}
which is wrong because ptex2tex applies regex that don't
capture the second }
!ec
The remedy is to place verbatim LaTeX commands in verbatim
blocks - that is safe.

# Could have doconce configure file where inline verbatim is
# configured to be \fontsize... directly, not via ptex2tex \code{}.


===== Errors in figure captions =====

Such errors typically arise from unbalanced curly braces, or dollar signs
around math, and similar LaTeX syntax errors.

(Note that verbatim font is likely to cause trouble inside figure captions,
but DocOnce will automatically replace verbatim text in back-ticks by
a proper `texttt` command (since verbatim font constructions does not work
inside figure captions) and precede underscores by backslash.)

===== I want to tune the top (preamble) of the LaTeX file =====
label{latex:custom:preamble}

It is easy to provide
a customized preamble text:

!bc sys
Terminal> doconce format latex mydoc --latex_preamble=mytop.tex
!ec
If `mytop.tex` starts with a `documentclass` specification, the whole
file becomes the complete preamble in `mydoc.p.tex`, otherwise
`mytop.tex` is added at the end of the preamble generated by
DocOnce.

If you already have some preamble that defines styles etc., I recommend
to generate a `.tex` file from DocOnce and merge the preamble you have
with the one generated by DocOnce. When the `.tex` file compiles with
the desired preamble, store it in a separate file and
use it with the `--latex_preamble=` option. (This approach will for
fix the preamble for the future so updates of the DocOnce-generated
preamble will not be available for this document.)

Note also that `doconce replace` and `doconce subst` can be used
after `doconce format` to tune the LaTeX code in the preamble (and
elsewhere). Such automatic edits are useful if they are few.

There are comment lines with `--- begin preamble ---` and
`--- end preamble ---` in the generated `.tex` file that can be
used to replace the whole preamble by another text via a script.

===== How can I control the placement of figures? =====

In general, LaTeX will control the placement, and DocOnce applies
(for now) the `[t]` option to recommend figures to be placed at the top
of a page. This can be changed in different ways, using
techniques from Sections ref{latex:custom:fig:name} and
ref{latex:custom:preamble}. The `float` package and the `[H]` (``here'')
option for figures makes figures appear closer to their original
location:

!bc latexcod
\usepackage{float}
\floatplacement{figure}{H}
!ec
The `[t]` option in figures must be removed:

!bc sys
doconce replace '{figure}[t]' '{figure}' mydoc.tex
!ec

__Custom preamble file.__
Place the lines above in a file `mypreamble.tex` and ask DocOnce to add
this file to the preamble: `--latex_preamble=mypreamble.tex`.

__Edit the .tex file.__
There is a special line in the `.tex` file,

!bc
%% insert custom LaTeX commands...
!ec
which can be used
to insert desired commands, in this case by

!bc sys
doconce subst '% insert custom LaTeX.+' '\\usepackage{float}\n\floatplacement{figure}{H}' mydoc.tex
!ec

Note that you in both cases
need to run the `doconce replace` above command to remove the `[t]`
option.

===== How can I get a two-column text? =====

Simply add `twocolum` to the `\documentclass` command. If the `mydoc.tex`
file looks like

!bc latexcod
\documentclass[%
twoside,
...
!ec
you can do a simple substitution edit

!bc sys
Terminal> doconce subst 'twoside,' 'twocolumn,\ntwoside,' mydoc.tex
!ec

===== Solution heading in exercise solutions appear after the solution content =====
label{trouble:bsol:code}

Sometimes a solution environment with code

!bc do
|bsol
|bc cod
def f(x):
    return x + 2
|ec
|esol
!ec
leads to strange behavior with verbatim LaTeX
environment: the _Solution_ heading appears after the code
in the solution. This appears to be a LaTeX problem since the
generated LaTeX code has the heading and solution content in the right
order. A working remedy is to insert a text before the code:

!bc do
Code:
|bsol
|bc cod
def f(x):
    return x + 2
|ec
|esol
!ec

===== Subexercises (`subex{a)}`) triggers ``Missing number, treated as zero'' =====

Check if you have
done a `doconce subst` of `section` to `section*`. Such a substitution
will alter the newcommand `\subex` defined in the `.tex` file and insert
an erroneous `\@startsection*`, which should not contain the `*`.
Be more specific with the substitution of `section` in the `.tex` file:

!bc shcod
doconce subst '\\section\{' '\\section*{' mydoc.tex
doconce subst '\\subsection\{' '\\subsection*{' mydoc.tex
# or
doconce replace '\section{' '\section*{' mydoc.tex
doconce replace '\subsection{' '\subsection*{' mydoc.tex
!ec

===== Page numbers appear in both header and footer =====

If you experience page numbers in header and footer (this is a problem
if you have `{copyright...}` notifications as part of an `AUTHOR`
specification), you need to edit
the `.tex` file. Removing the page number in the footer is done by

!bc sys
Terminal> doconce subst '\\fancyfoot\[LE.+' '' mydoc.tex
!ec
Page numbers in headers typically arise from using a special LaTeX style
or the `doconce format` option `--latex_fancy_header` (but in the latter
case there will never be page numbers in the footer).

===== Links in the table of contents go to wrong page =====

This is not an uncommon problem. We "resolved this problem":
"http://tex.stackexchange.com/questions/23499/incorrect-bookmarks-and-page-number-in-table-of-contents"
for the index by adding `\cleardoublepage\phantomsection` right before
`\printindex`.  The same trick can be useful in other contexts.

======= gwiki =======

===== Strange nested lists in gwiki =====

DocOnce cannot handle nested lists correctly in the gwiki format.
Use nonnested lists or edit the `.gwiki` file directly.

===== Lists in gwiki look ugly in the gwiki source =====

Because the Google Code wiki format requires all text of a list item to
be on one line, DocOnce simply concatenates lines in that format,
and because of the indentation in the original DocOnce text, the gwiki
output looks somewhat ugly. The good thing is that this gwiki source
is seldom to be looked at - it is the DocOnce source that one edits
further.

======= HTML =======

===== Translation aborts when labels are not defined =====

By default, the DocOnce translation of HTML document aborts when references
are found to lables not defined in the document (i.e., labels in other
documents). This abortion can be annoying, and although it can be
nullified by `--no_abort`, that option also ignores other error messages.
Instead, use `--allow_refs_to_external_docs` to allow references to labels
in other documents. These references will of course not work, but the
option can be handy, e.g., while compiling chapters for a book individually.

===== MathJax formulas are not properly rendered =====

Here are some common problems:

 * Two equations cannot have identical label (this error often arises
   from copying and pasting equations)
 * `[` and `]` brackets must sometimes be replaced by `\lbrack` and `\rbrack`

===== How can I change the layout of the HTML page? =====

=== Autoedits of the `.html` file ===

The easiest way is to edit the HTML style or the HTML code directly.
However, those edits are overwritten the next time you compile the
DocOnce document to HTML. The edits should therefore be automated
using `doconce subst` (for regular expression editing) or `doconce replace`
(for plain text substitution editing) commands in the file where
you run `doconce format html mydoc`. For example, say you want narrower
gray admonition boxes with a much thicker boundary. The `.alert`
style must then be changed, more precisely the `border` and the `width`
specification:

!bc shcod
doconce replace 'border:1px' 'border:11px' mydoc.html
doconce replace 'width: 75%;' 'width: 35%' mydoc.html
!ec

=== Specify a `.css` file ===

Another way to control the layout is to copy the style in the HTML
file into a `.css` file, edit that file as you like, and provide the
file as part of the compilation using the `--css=mystyle.css`
flag. For example, say you want to transform the headings to something
attractive for young girls (white text on pink background). A `.css`
file can be written from scratch, but one can also generate one from
one of the built-in DocOnce HTML styles by running

!bc sys
Terminal> doconce format html mydoc --css=pink.css \
          --html_style=blueish
!ec
The result is a new file `pink.css` containing the specification
of the `blueish` style. One can now change this `pink.css` file
to `h1` headings with pink background and white text, `h2` and `h3`
headings with pink text, and pink color for visited or hovered hyperlinks:

!bc htmlcod
h1 {
    font-family:"comic sans ms";
    width: 900px;
    font-size: 48px;
    text-align: center;
    background: #EA00FF; /* pink */
    border-style: solid;
    border-width: 5px;
    border-color: #FFFFFF;
    padding: 20px;
    margin: 20px;
    margin-left: 10px;
    color: white
}
h2, h3 {
    font-family:"comic sans ms";
    font-size: 18px;
    color: #EA00FF;
}
h3 { font-size: 24px; }
a { color: #1e36ce; text-decoration:none; }
a:hover, a:visited { color: #EA00FF; /* pink */ }
...
!ec
The rest of the file can remain unaltered. Running

!bc sys
Terminal> doconce format html mydoc --css=pink.css \
          --html_style=blueish
!ec
will now render `mydoc.html` with pink headings and visited links.

=== Specify a template ===

The standard of way of completely controlling the HTML format is to
use an HTML template. The DocOnce source is then the body of text
(leave out `TITLE:` to get HTML without a header and footer). The
`--html_template=filename` command-line option will then embed the
DocOnce text in the specified template file, where you can use style
sheets and desired constructs in the header and footer.  The template
can have ``slots'' for a title (`%(title)s`), a date (`%(date)s`), and
the main body of text (`%(main)s`).  For typesetting code, `pygments`
is used (if installed) and can be turned off by `--no_pygments_html`
(leaving code in gray boxes).


The easiest way is to get fancy layouts in HTML is to
use the `sphinx` format and one its many themes.


===== Why do figures look ugly when using HTML templates? =====

The HTML header that DocOnce generates contain special styles for
figure captions and the horizontal rule above figures. When using
templates these styles are not defined, resulting in a rule that
spans the width and a centered caption. Changing the appearance
of the rule and caption can either be done by inserting styles or
simply by automatic editing of the HTML code in a little shell script:

!bc
doconce replace '<p class="caption">' \
 '<p style="width: 50%; font-style: italic; color: blue">' mydoc.html
doconce replace '<hr class="figure">' \
 '<hr style="width:60%, font-style: normal">' mydoc.html
!ec

======= reveal/deck HTML5 slides =======

===== Python Online Tutor code does not work in reveal =====

Use the Chrome browser (the code does not work in Firefox in combination
with reveal HTML5, but it works in plain HTML).

===== Reveal slides are stacked on top of each other =====

This problem can be caused by having a `!bblock` environment crossing two
slides because of a forgotten `!eblock` on the first slide.
To locate the problematic slides, copy chunks of slides to a new file,
compile, and inspect. This will reveal the problematic chunk.

===== Reveal slides are moving steadily to the left =====

This seems to be a problem when one has used the mouse to scroll down
on a slide and continue to use the right arrow for moving to the
next slide. Click on the arrow in the slide instead of using the arrow key.

===== YouTube movies do not work =====

They do not work in reveal or deck unless the Chrome browser is used.
Usually the HTML5 slides work best in Firefox.

===== Online Python Tutor does not work =====

Seems to be a problem with reveal slides. The *Forward* button is not
clickable.
