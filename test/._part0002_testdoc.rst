.. !split and check if these extra words are included properly in the comment


Subsection 1
------------

More text, with a reference back to the section :ref:`sec1` and further
to the section :ref:`subsubsec:ex`. 
.. index:: somefunc function


.. sphinx code-blocks: pycod=python cod=fortran cppcod=c++ sys=console


Let's do some copying from files too. First from subroutine up to the very end,


.. code-block:: fortran

              subroutine test()
              integer i
              real*8 r
              r = 0
              do i = 1, i
                 r = r + i
              end do
              return
        C     END1
        
              program testme
              call test()
              return

and then just the subroutine,

.. code-block:: fortran

              subroutine test()
              integer i
              real*8 r
              r = 0
              do i = 1, i
                 r = r + i
              end do
              return

and finally the complete file:

.. code-block:: fortran

        C     a comment
        
              subroutine test()
              integer i
              real*8 r
              r = 0
              do i = 1, i
                 r = r + i
              end do
              return
        C     END1
        
              program testme
              call test()
              return


Testing other code environments. First Python:

.. code-block:: text


        !bc pycod
        def f(x):
            return x+1
        !ec

which gets rendered as


.. code-block:: python

        def f(x):
            return x+1


Now a complete program to be shown via Python Online Tutorial:

.. raw:: html

        <iframe width="950" height="500" frameborder="0"
                src="http://pythontutor.com/iframe-embed.html#code=def+f%28x%29%3A%0A++++return+x+%2B+1%0A%0Aa+%3D+2%0Ax+%3D+a%0Aa+%3D+1%0Av+%3D+f%28x%29%0Aprint+v&curInstr=0&py=2&cumulative=false">
        </iframe>


Then Cython:

.. code-block:: cython

        cpdef f(double x):
            return x + 1


.. This one tests a + sign before a code environment

C++:

.. code-block:: c++

        #include <iostream>
        
        int main()
        {
           std::cout << "Sample output" << std::endl;
           return 0
        }

.. The next should get correctly typset in sphinx (cod is fcod)

And a little bit of Fortran:


.. code-block:: text


        !bc cod
              subroutine midpt(x, length, a, b)
              real*8 a, b, x
              x = (a + b)/2
              length = b - a
              return
              end
        !ec

which then is typeset as


.. code-block:: fortran

              subroutine midpt(x, length, a, b)
              real*8 a, b, x
              x = (a + b)/2
              length = b - a
              return
              end


HTML:


.. code-block:: html

        <table>
        <tr><td>Column 1</td><td>Column 2</td></tr>
        <tr><td>0.67526 </td><td>0.92871 </td></tr>
        <!-- comment -->
        </table>


System call:

.. code-block:: console

        Terminal> mkdir test
        Terminal> cd test
        Terminal> myprog -f
        output1
        output2


It is time to test ``verbatim inline font`` especially with ``a newline
inside the text`` and an exclamation mark at the end: ``BEGIN``! The
exclamation mark inside the verbatim text is not smart for latex as
we use ! in the ``verb`` typesetting... Also test backslashes
like ``\begin`` and ``\end`` in inline verbatim text.

Here is some <font color="red">red</font> color and an attempt to write <font color="green">with
green color containing a linebreak.
And one more.</font> Some formats will only display this correctly when
HTML is the output format.


.. _subsec:ex:

Subsection 2: Testing figures and movies
----------------------------------------

.. index:: figures


Test of figures. In particular we refer to Figure :ref:`fig:impact` in which
there is a flow.


.. _fig:impact:

.. figure:: ../doc/manual/figs/streamtubes.png
   :width: 200

   *Visualization of flow by streamtubes*


Figures without captions are allowed and will be inlined.


.. figure:: ../doc/manual/figs/streamtubes.png
   :width: 200




.. index:: movies


Test of movies
~~~~~~~~~~~~~~

Movie :ref:`mov:tsunami` shows a tsunami.

.. raw:: html
        
        <embed src="../doc/manual/figs/mjolnir.mpeg" width=700 height=400 autoplay="false" loop="true"></embed>
        <p><em>Mjolnir tsunami (by Sylfest Glimsdal) .</em></p>



Test empty caption (for inline movie):

.. raw:: html
        
        <embed src="../doc/manual/figs/wavepacket.mpeg" width=700 height=400 autoplay="false" loop="true"></embed>
        <p><em></em></p>



.. Test wrong syntax and multi-line caption


.. raw:: html
        
        <p><a href="wavepacket_0001.html">Movie of files <tt>../doc/manual/figs/wavepacket_*.png</tt></a>
        <em>Movie based on collection of frames (here just a few frames compared with the full wavepacket.mpeg movie).</em></p>



.. Check out the correct with and height of YouTube movies from the

.. embed command that the YouTube page can generate. Similar for Vimeo.


.. raw:: html
        
        <iframe width="420" height="315" src="http://www.youtube.com/embed/_O7iUiftbKU" frameborder="0" allowfullscreen></iframe>
        
        <em>Movies can be uploaded to YouTube and embedded as HTML or as a link.</em>
        



.. raw:: html
        
        <iframe width="500" height="278" src="http://player.vimeo.com/video/55562330" frameborder="0" allowfullscreen></iframe>
        
        <em>Computational fluid dynamics movie.</em>
        




.. Test multi-line caption in figure


Here is figure :ref:`myfig` with a long multi-line caption
and an extra space before the FIGURE keyword.


.. _myfig:

.. figure:: ../doc/manual/figs/wavepacket_0001.png
   :width: 500

   A long caption spanning several lines and containing verbatim words like ``my_file_v1`` and ``my_file_v2`` as well as math with subscript as in :math:`t_{i+1}`


.. Must be a blank line after MOVIE or FIGURE to detect this problem


.. Test URL as figure name



.. figure:: https://raw.github.com/hplgit/doconce/master/doc/blog/f_plot.png
   :width: 500



.. Test wikimedia type of files that otherwise reside in subdirs


.. Somewhat challenging heading with latex math, \t, \n, ? and parenthesis


.. _decay:sec:theta:

The :math:`\theta` parameter (not :math:`\nabla`?)
--------------------------------------------------

Functions do not always need to be advanced, here is one
involving :math:`\theta`:

.. code-block:: text


        def f(theta):
            return theta**2


*More on :math:`\theta`.* Here is more text following headline with math.

Newcommands must also be tested in this test report:
:math:`\frac{1}{2}`, :math:`{1/2}`, :math:`\pmb{x}`, :math:`\frac{Du}{dt}`,
both inline and in block:


.. math::
        
        \frac{Du}{dt} &= 0
        \\ 
        \frac{1}{2} &= {1/2}\\ 
        \frac{1}{2}\pmb{x} &= \pmb{n}
        


Or with align with label and numbers:


.. math::
   :label: aligneq1
        
        \frac{Du}{dt} = 0
        
        



.. math::
          
        \frac{1}{2} = {1/2}
        



.. math::
   :label: aligneq2
          
        \frac{1}{2}\pmb{x} = \pmb{n}
        
        


Sphinx makes a fix here and splits align into multiple equation
environments.

Custom Environments
-------------------

Here is an attempt to create a theorem environment via Mako
(for counting theorems) and comment lines to help replacing lines in
the ``.tex`` by proper begin-end LaTeX environments for theorems.
Should look nice in most formats!



.. begin theorem


*Theorem 5.* Let :math:`a=1` and :math:`b=2`. Then :math:`c=3`.

.. end theorem


.. begin proof

*Proof.* Since :math:`c=a+b`, the result follows from straightforward addition.
:math:`\Diamond`
.. end proof


As we see, the proof of Theorem 5 is a modest
achievement.


.. _subsec:table:

Tables
------


.. index:: test index with verbatim text which is possible


.. index:: test two (separate) verbatim expressions which is also possible


.. index::
   single: index with; subindex


.. index with comma could fool sphinx


.. index::
   single: index, with comma, and one more


Let us take this table from the manual:


============  ============  ============  
    time        velocity    acceleration  
============  ============  ============  
0.0                 1.4186         -5.01  
2.0               1.376512        11.919  
4.0                 1.1E+1     14.717624  
============  ============  ============  


The Doconce source code reads

.. code-block:: text


          |--------------------------------|
          |time  | velocity | acceleration |
          |--l--------r-----------r--------|
          | 0.0  | 1.4186   | -5.01        |
          | 2.0  | 1.376512 | 11.919       |
          | 4.0  | 1.1E+1   | 14.717624    |
          |--------------------------------|


Here is yet another table to test that we can handle more than
one table:

============  ============  ============  
    time        velocity    acceleration  
============  ============  ============  
0.0           1.4186        -5.01         
1.0           1.376512      11.919        
3.0           1.1E+1        14.717624     
============  ============  ============  

And one with math headings (that are expanded and must be treated
accordingly) and verbatim heading and entry:

================  ================  ================  ================  
   :math:`i`        :math:`h_i`     :math:`\bar T_i`      ``L_i``       
================  ================  ================  ================  
0                                0               288           -0.0065  
1                           11,000               216               0.0  
2                           20,000               216             0.001  
3                           32,000               228            0.0028  
4                           47,000               270               0.0  
5                           51,000               270           -0.0028  
6                           71,000               214           ``NaN``  
================  ================  ================  ================  

And add one with verbatim headings (with underscores),
and rows starting with ``|-`` because of a negative number,
and ``|`` right after verbatim word (with no space):

=====================  =====================  =====================  =====================  
        exact                 ``v_1``         :math:`a_i` + ``v_2``       ``verb_3_``       
=====================  =====================  =====================  =====================  
                    9                   9.62                   5.57                   8.98  
                  -20                 -23.39                  -7.65                 -19.93  
                   10                  17.74                  -4.50                   9.96  
                    0                  -9.19                   4.13                  -0.26  
=====================  =====================  =====================  =====================  


A test of verbatim words in heading with subscript :math:`a_i`: ``my_file_v1`` and ``my_file_v2``
-------------------------------------------------------------------------------------------------

*Files ``my_file_v1.py`` and ``my_file_v2.py`` define some math :math:`a_{i-1}`.* Here is
some text.

Bibliography test
-----------------

Here is an example: [Ref01]_ discussed propagation of
large destructive water waves, [Ref02]_ gave
an overview of numerical methods for solving the Navier-Stokes equations,
while the use of Backward Kolmogorov equations for analyzing
random vibrations was investigated in [Ref03]_.
The book chapter [Ref04]_ contains information on
C++ software tools for programming multigrid methods. A real retro
reference is [Ref05]_ about a big FORTRAN package.
Multiple references are also possible, e.g., see
[Ref01]_ [Ref04]_.

We need to cite more than 10 papers to reproduce an old formatting
problem with blanks in the keys in reST format:
[Ref06]_ [Ref03]_ [Ref07]_ [Ref01]_
and
[Ref02]_ [Ref08]_ [Ref09]_ [Ref10]_ [Ref11]_ [Ref12]_ [Ref13]_
and all the work of
[Ref14]_ [Ref04]_ [Ref15]_ as well as
old work [Ref05]_ and [Ref16]_, and the
talk [Ref17]_.
Langtangen also had two thesis [Ref18]_ [Ref16]_.
More retro citations are
the old ME-IN323 book [Ref19]_ and the
[Ref20]_ OONSKI '94 paper.




.. --- begin exercise ---


.. _Example:

Example 1: Examples can be typeset as exercises
-----------------------------------------------

Examples can start with a subsection heading starting with ``Example:``
and then, with the command-line option ``--examples_as_exercises`` be
typeset as exercises. This is useful if one has solution
environments as part of the example.


*a)* State some problem.

*Solution.* The answer to this subproblem can be written here.

*b)* State some other problem.

*Hint 1.* A hint can be given.

*Hint 2.* Maybe even another hint?

*Solution.* The answer to this other subproblem goes here,
maybe over multiple doconce input lines.

.. --- end exercise ---



.. _subsubsec:ex:

URLs
----

Testing of URLs: hpl's home page `hpl <http://folk.uio.no/hpl>`_, or
the entire URL if desired, `<http://folk.uio.no/hpl>`_.  Here is a
plain file link `<testdoc.do.txt>`_, or `<testdoc.do.txt>`_, or
`<testdoc.do.txt>`_ or `<testdoc.do.txt>`_ or `a link with
newline <testdoc.do.txt>`_. Can test spaces with the link with word
too: `hpl <http://folk.uio.no/hpl>`_ or `hpl <http://folk.uio.no/hpl>`_. Also ``file:///`` works: `link to a
file <file:///home/hpl/vc/doconce/doc/demos/manual/manual.html>`_ is
fine to have. Moreover, "loose" URLs work, i.e., no quotes, just
the plain URL as in `<http://folk.uio.no/hpl>`_, if followed by space, comma,
colon, semi-colon, question mark, exclamation mark, but not a period
(which gets confused with the periods inside the URL).

Mail addresses can also be used: `hpl@simula.no <mailto:hpl@simula.no>`_, or just a `mail link <mailto:hpl@simula.no>`_, or a raw `<mailto:hpl@simula.no>`_.

Here are some tough tests of URLs, especially for the ``latex`` format:
`Newton-Cotes <http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas>`_ formulas
and a `good book <http://www.springer.com/mathematics/computational+science+%26+engineering/book/978-3-642-23098-1>`_. Need to test
Newton-Cotes with percentage in URL too:
`<http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas>`_
and `<http://en.wikipedia.org/wiki/Newton-Cotes#Open_Newton.E2.80.93Cotes_formulae>`_ which has a shebang.

For the ``--device=paper`` option it is important to test that URLs with
monofont link text get a footnote, as in this reference to
`decay_mod <https://github.com/hplgit/INF5620/tree/gh-pages/src/decay/experiments/decay_mod.py>`_.

.. Comments should be inserted outside paragraphs (because in the rst

.. format extra blanks make a paragraph break).


.. Note that when there is no http: or file:, it can be a file link

.. if the link name is URL, url, "URL", or "url". Such files should,

.. if rst output is desired, but placed in a ``_static*`` folder.


More tough tests: repeated URLs whose footnotes when using the
``--device=paper`` option must be correct. We have
`google <http://google.com>`_, `google <http://google.com>`_, and
`google <http://google.com>`_, which should result in exactly three
footnotes.



LaTeX Mathematics
-----------------

Here is an equation without label using backslash-bracket environment:

.. math::
         a = b + c 

or with number and label, as in :eq:`my:eq1`, using the equation environment:

.. math::
   :label: my:eq1
        
        {\partial u\over\partial t} = \nabla^2 u 
        

We can refer to this equation by :eq:`my:eq1`.

Here is a system without equation numbers, using the align-astrisk environment:

.. math::
        
        \pmb{a} &= \pmb{q}\times\pmb{n} \\ 
        b &= \nabla^2 u + \nabla^4 v
        



And here is a system of equations with labels in an align environment:

.. math::
   :label: eq1
        
        a = q + 4 + 5+ 6  
        



.. math::
   :label: eq2
          
        b = \nabla^2 u + \nabla^4 x 
        

We can refer to :eq:`eq1`-:eq:`eq2`. They are a bit simpler than
the Navier-Stokes equations. And test LaTeX hyphen in ``CG-2``.
Also test :math:`a_{i-j}` as well as :math:`kx-wt`.

Many of the next environments will fail in non-latex formats.
Testing multiline:

.. math::
   :label: multiline:eq1
        
        a = b = q + \\ 
          f + \nabla\cdot\nabla u
        
        

Testing split:

.. math::
   :label: split:envir:eq
        
        
        
        a = b = q &+ \\ 
          & f + \nabla\cdot\nabla u
        
        

We can refer to the last equation by :eq:`split:envir:eq`.

Testing gather:

.. math::
        
        a = b \\ 
        c = d + 7 + 9
        


Testing alignat:

.. math::
        \begin{alignat}{2}
        a &= q + 4 + 5+ 6\qquad & \mbox{for } q\geq 0  \\ 
        b &= \nabla^2 u + \nabla^4 x & x\in\Omega 
        \end{alignat}

Let us refer to :eq:`eq1`-:eq:`eq2` again, and to the
alignat variant :eq:`eq1a`-:eq:`eq2a`, and to :eq:`my:eq1`.

Testing eqnarray:

.. math::
        
        {\partial u\over\partial t}  &=  \nabla^2 u + f, \\ 
        {\partial v\over\partial t}  &=  \nabla\cdot(q(u)\nabla v) + g 
        


More mathematical typesetting is demonstrated in the coming exercises.

Below, we have :ref:`demo:ex:1` and :ref:`demo:ex:2`,
as well as :ref:`proj:circle1` and :ref:`exer:you`, and in
between there we have :ref:`exer:some:formula`.

Exercises
=========



.. --- begin exercise ---


.. _demo:ex:1:

Problem 1: Flip a Coin
----------------------
.. keywords = random numbers; Monte Carlo simulation


.. Torture tests


Make a program that simulates flipping a coin :math:`N` times.
Print out "tail" or "head" for each flip and
let the program count the number of heads.


.. Test syntax error





Remarks  (1)
~~~~~~~~~~~~

Remarks with such a subsubsection heading would previously mark
the beginning of a new exercise and cause trouble. Maybe a list

1. Mark 1.

2. Mark 2.

.. --- begin hint in exercise ---


*Hint 1.* Use ``r = random.random()`` and define head as ``r <= 0.5``.

.. --- end hint in exercise ---


.. --- begin hint in exercise ---


*Hint 2.* Draw an integer among :math:`\{1,2\}` with
``r = random.randint(1,2)`` and define head when ``r`` is 1.

.. --- end hint in exercise ---



.. --- begin answer of exercise ---

*Answer.* If the ``random.random()`` function returns a number :math:`<1/2`, let it be
head, otherwise tail. Repeat this :math:`N` number of times.

.. --- end answer of exercise ---



.. --- begin solution of exercise ---

*Solution.* Code:

.. code-block:: python

        import sys, random
        N = int(sys.argv[1])
        heads = 0
        for i in range(N):
            r = random.random()
            if r <= 0.5:
                heads += 1
        print 'Flipping a coin %d times gave %d heads' % (N, heads)

.. --- end solution of exercise ---

Filenames: ``flip_coin.py``, ``flip_coin.pdf``.

.. solution files: mysol.txt, mysol_flip_coin.py, yet_another.file


.. --- end exercise ---



Not an exercise
---------------

Should be possible to stick a normal section in the middle of many
exercises.



.. --- begin exercise ---


.. _demo:ex:2:

Project 1: Compute a Probability
--------------------------------

.. Minimalistic exercise



What is the probability of getting a number between 0.5 and 0.6 when
drawing uniformly distributed random numbers from the interval :math:`[0,1)`?

.. --- begin hint in exercise ---


*Hint.* To answer this question empirically, let a program
draw :math:`N` such random numbers using Python's standard ``random`` module,
count how many of them, :math:`M`, that fall in the interval :math:`(0.5,0.6)`, and
compute the probability as :math:`M/N`.

.. --- end hint in exercise ---


.. --- end exercise ---





.. --- begin exercise ---


.. _proj:circle1:

Project 2: Explore Distributions of Random Circles
--------------------------------------------------

The formula for a circle is given by


.. math::
        
        x = x_0 + R\cos 2\pi t,
        



.. math::
          
        y = y_0 + R\sin 2\pi t,
        

where :math:`R` is the radius of the circle, :math:`(x_0,y_0)` is the
center point, and :math:`t` is a parameter in the unit interval :math:`[0,1]`.
For any :math:`t`, :math:`(x,y)` is a point on the circle.
The formula can be used to generate ``n`` points on a circle:


.. code-block:: python

        import numpy as np
        
        def circle(R, x0, y0, n=501):
            t = np.linspace(0, 1, n)
            x = x0 + R*np.cos(2*np.pi*t)
            y = y0 + R*np.sin(2*np.pi*t)
            return x, y
        
        x, y = circle(2.0, 0, 0)


.. Often in an exercise we have some comments about the solution

.. which we normally want to keep where they are.


The goal of this project is to draw :math:`N` circles with random
center and radius. Plot each circle using the ``circle`` function
above.


*a)* Let :math:`R` be normally distributed and :math:`(x_0,y_0)` uniformly distributed.

.. --- begin hint in exercise ---


*Hint.* Use the ``numpy.random`` module to draw the
:math:`x_0`, :math:`y_0`, and :math:`R` quantities.

.. --- end hint in exercise ---



.. --- begin answer of exercise ---

*Answer.* Here goes the short answer to part a).

.. --- end answer of exercise ---



.. --- begin solution of exercise ---

*Solution.* Here goes a full solution to part a).

.. --- end solution of exercise ---


*b)* Let :math:`R` be uniformly distributed and :math:`(x_0,y_0)` normally distributed.
Filename: ``norm.py``.

*c)* Let :math:`R` and :math:`(x_0,y_0)` be normally distributed.

Filename: ``circles.pdf``.

.. Closing remarks for this Project


Remarks  (2)
~~~~~~~~~~~~

At the very end of the exercise it may be appropriate to summarize
and give some perspectives.


.. --- end exercise ---





.. --- begin exercise ---


.. _exer:dist:

Exercise 1: Determine some Distance
-----------------------------------

Intro to this exercise. Questions are in subexercises below.





.. No meaning in this weired test example:

The text here belongs to the main (intro) part of the exercise. Need
closing remarks to have text after subexercises.


.. --- begin solution of exercise ---

*Solution.* Here goes a full solution of the whole exercise.
With some math :math:`a=b` in this solution:

.. math::
         \hbox{math in solution: } a = b 

And code ``a=b`` in this solution:

.. code-block:: text


        a = b  # code in solution

End of solution is here.

.. --- end solution of exercise ---



*a)* Subexercises are numbered a), b), etc.

.. --- begin hint in exercise ---


*Hint 1.* First hint to subexercise a).
With math :math:`a=b` in hint:


.. math::
         a=b. 

And with code (in plain verbatim) returning :math:`x+1` in hint:


.. code-block:: text


        def func(x):
            return x + 1  # with code in hint

.. --- end hint in exercise ---


.. --- begin hint in exercise ---


*Hint 2.* Second hint to subexercise a).

.. --- end hint in exercise ---

Filename: ``subexer_a.pdf``.


.. --- begin answer of exercise ---

*Answer.* Short answer to subexercise a).
With math in answer: :math:`a=b`.

.. --- end answer of exercise ---


*b)* Here goes the text for subexercise b).


Some math :math:`\cos^2 x + \sin^2 x = 1` written one a single line:


.. math::
         \cos^2 x + \sin^2 x = 1 \thinspace .


.. --- begin hint in exercise ---


*Hint.* A hint for this subexercise.

.. --- end hint in exercise ---

Filename: ``subexer_b.pdf``.


.. --- begin solution of exercise ---

*Solution.* Here goes the solution of this subexercise.

.. --- end solution of exercise ---


.. Closing remarks for this Exercise


Remarks  (3)
~~~~~~~~~~~~

Some final closing remarks, e.g., summarizing the main findings
and their implications in other problems can be made. These
remarks will appear at the end of the typeset exercise.


.. --- end exercise ---





.. --- begin exercise ---


Some exercise without the "Exercise:" prefix
--------------------------------------------

.. Another minimalistic exercise


Just some text. And some math saying that :math:`e^0=1` on a single line,
to test that math block insertion is correct:


.. math::
         \exp{(0)} = 1 


And a test that the code ``lambda x: x+2`` is correctly placed here:


.. code-block:: text


        lambda x: x+2


.. --- end exercise ---





.. --- begin exercise ---


Example 2: Just an example
--------------------------

.. This example needs the --examples_as_exercises option, otherwise

.. it is just typeset as it is written.



*a)* What is the capital of Norway?

*Answer.* Oslo.

.. --- end exercise ---



Here goes another section
=========================

With some text, before we continue with exercises.

More Exercises
==============



.. --- begin exercise ---


.. _exer:some:formula:

Exercise 3: Make references to projects and problems
----------------------------------------------------

Pick a statement from :ref:`proj:circle1` or :ref:`demo:ex:1`
and verify it.
Filename: ``verify_formula.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _exer:you:

Project 3: References in a headings do not work well in sphinx
--------------------------------------------------------------

Refer to the previous exercise as :ref:`exer:some:formula`,
the two before that as :ref:`demo:ex:2` and :ref:`proj:circle1`,
and this one as :ref:`exer:you`.
Filename: ``selc_composed.pdf``.

.. --- end exercise ---



References
==========

.. [Ref01]
   **H. P. Langtangen and G. Pedersen**. Propagation of Large Destructive Waves,
   *International Journal of Applied Mechanics and Engineering*,
   7(1),
   pp. 187-204,
   2002.

.. [Ref02]
   **H. P. Langtangen, K.-A. Mardal and R. Winther**. Numerical Methods for Incompressible Viscous Flow,
   *Advances in Water Resources*,
   25,
   pp. 1125-1146,
   2002.

.. [Ref03]
   **H. P. Langtangen**. Numerical Solution of First Passage Problems in Random Vibrations,
   *SIAM Journal of Scientific and Statistical Computing*,
   15,
   pp. 997-996,
   1994.

.. [Ref04]
   **K.-A. Mardal, G. W. Zumbusch and H. P. Langtangen**. Software Tools for Multigrid Methods,
   Advanced Topics in Computational Partial Differential Equations -- Numerical Methods and Diffpack Programming,
   edited by **H. P. Langtangen and A. Tveito**,
   Springer,
   2003.

.. [Ref05]
   **H. P. Langtangen**. The FEMDEQS Program System,
   *Department of Mathematics, University of Oslo*,
   1989.

.. [Ref06]
   **H. P. Langtangen**. Stochastic Breakthrough Time Analysis of an Enhanced Oil Recovery Process,
   *SIAM Journal on Scientific Computing*,
   13,
   pp. 1394-1417,
   1992.

.. [Ref07]
   **M. Mortensen, H. P. Langtangen and G. N. Wells**. A FEniCS-Based Programming Framework for Modeling Turbulent Flow by the Reynolds-Averaged Navier-Stokes Equations,
   *Advances in Water Resources*,
   34(9),
   `doi: 10.1016/j.advwatres.2011.02.013 <http://dx.doi.org/10.1016/j.advwatres.2011.02.013>`_,
   2011.

.. [Ref08]
   **S. Glimsdal, G. Pedersen, K. Atakan, C. B. Harbitz, H. P. Langtangen and F. L\ovholt**. Propagation of the Dec.~26, 2004 Indian Ocean Tsunami: Effects of Dispersion and Source Characteristics,
   *International Journal of Fluid Mechanics Research*,
   33(1),
   pp. 15-43,
   2006.

.. [Ref09]
   **S. Rahman, J. Gorman, C. H. W. Barnes, D. A. Williams and H. P. Langtangen**. Numerical Investigation of a Piezoelectric Surface Acoustic Wave Interaction With a One-Dimensional Channel,
   *Physical Review B: Condensed Matter and Materials Physics*,
   74,
   2006.

.. [Ref10]
   **J. B. Haga, H. Osnes and H. P. Langtangen**. On the Causes of Pressure Oscillations in Low-Permeable and Low-Compressible Porous Media,
   *International Journal of Analytical and Numerical Methods in Geomechanics*,
   `doi: 10.1002/nag.1062 <http://dx.doi.org/10.1002/nag.1062>`_,
   2011,
   `http://onlinelibrary.wiley.com/doi/10.1002/nag.1062/abstract <http://onlinelibrary.wiley.com/doi/10.1002/nag.1062/abstract>`_.

.. [Ref11]
   **H. P. Langtangen**. *Computational Partial Differential Equations - Numerical Methods and Diffpack Programming*,
   Springer,
   2003.

.. [Ref12]
   **H. P. Langtangen**. *Python Scripting for Computational Science*,
   Springer,
   2008.

.. [Ref13]
   **H. P. Langtangen and G. Pedersen**. Finite Elements for the Boussinesq Wave Equations,
   Waves and Non-linear Processes in Hydrodynamics,
   edited by **J. Grue, B. Gjevik and J. E. Weber**,
   Kluwer Academic Publishers,
   pp. pp. 117-126,
   1995,
   `http://www.amazon.ca/Waves-Nonlinear-Processes-Hydrodynamics-John/dp/0792340310 <http://www.amazon.ca/Waves-Nonlinear-Processes-Hydrodynamics-John/dp/0792340310>`_.

.. [Ref14]
   **H. P. Langtangen**. *A Primer on Scientific Programming With Python*,
   Springer,
   2012.

.. [Ref15]
   **P. V. Jeberg, H. P. Langtangen and C. B. Terp**. Optimization With Diffpack: Practical Example From Welding,
   *Simula Research Laboratory*,
   2004.

.. [Ref16]
   **H. P. Langtangen**. Computational Methods for Two-Phase Flow in Oil Reservoirs,
   Ph.D. Thesis,
   Mechanics Division, Department of Mathematics, University of Oslo,
   1989.

.. [Ref17]
   [Ref17]. **H. P. Langtangen**,
   Computational Modeling of Huge Tsunamis From Asteroid Impacts,
   Invited keynote lecture at the \emphInternational conference on Computational Science 2007 (ICCS'07), Beijing, China,
   2007.

.. [Ref18]
   **H. P. Langtangen**. Solution of the Navier-Stokes Equations With the Finite Element Method in Two and Three Dimensions,
   M.Sc. Thesis,
   Mechanics Division, Department of Mathematics, University of Oslo,
   1985.

.. [Ref19]
   **H. P. Langtangen and A. Tveito**. Numerical Methods in Continuum Mechanics,
   *Center for Industrial Research*,
   1991.

.. [Ref20]
   **H. P. Langtangen**. Diffpack: Software for Partial Differential Equations,
   Proceedings of the Second Annual Object-Oriented Numerics Conference (OON-SKI'94), Sunriver, Oregon, USA,
   edited by **A. Vermeulen**,
   1994.





Appendix: Just for testing; part I
==================================

This is the first appendix.

A subsection within an appendix
-------------------------------

Some text.

Appendix: Just for testing; part II
===================================

This is more stuff for an appendix.

Appendix: Testing identical titles  (1)
---------------------------------------

Without label.


.. _test:title:id1:

Appendix: Testing identical titles  (2)
---------------------------------------

With label.

.. _test:title:id2:

Appendix: Testing identical titles  (3)
---------------------------------------

With label.

Appendix: Testing identical titles  (4)
---------------------------------------

Without label.


.. admonition:: Tip

   Here is a tip or hint box, typeset as a notice box.


Need a lot of text to surround the summary box.
Version control systems allow you to record the history of files
and share files among several computers and collaborators in a
professional way. File changes on one computer are updated or
merged with changes on another computer. Especially when working
with programs or technical reports it is essential
to have changes documented and to
ensure that every computer and person involved in the project
have the latest updates of the files.
Greg Wilson' excellent `Script for Introduction to Version Control <http://software-carpentry.org/2010/07/script-for-introduction-to-version-control/>`_ provides a more detailed motivation why you will benefit greatly
from using version control systems.


.. admonition:: Summary

   **Bold remark:** Make some text with this summary.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.
   Much testing in this document, otherwise stupid content.


Projects that you want to share among several computers or project
workers are today most conveniently stored at some web site "in the
cloud" and updated through communication with that site. I strongly
recommend you to use such sites for all serious programming and
scientific writing work - and all other important files.

The simplest services for hosting project files are `Dropbox <http://dropbox.com>`_ and `Google Drive <http://drive.google.com>`_.
It is very easy to get started with these systems, and they allow you
to share files among laptops and mobile units with as many users as
you want. The systems offer a kind of version control in that the
files are stored frequently (several times per minute), and you can go
back to previous versions for the last 30 days. However, it is
challenging  to find the right version from the past when there are
so many of them.

More seriously, when several people may edit files simultaneously, it
can be difficult detect who did what when, roll back to previous
versions, and to manually merge the edits when these are
incompatible. Then one needs more sophisticated tools than Dropbox or
Google Drive: project hosting services with true version control
systems.  The following text aims at providing you with the minimum
information to started with such systems. Numerous other tutorials
contain more comprehensive material and in-depth explanations of the
concepts and tools.

The idea with project hosting services is that you have the files
associated with a project in the cloud. Many people may share these
files.  Every time you want to work on the project you explicitly
update your version of the files, edit the files as you like, and
synchronize the files with the "master version" at the site where the
project is hosted.  If you at some point need to go back to a
version of the files at some particular point in the past,
this is an easy operation. You can also use tools to see
what various people have done with the files in the various versions.

All these services are very similar. Below we describe how you get
started with Bitbucket, GitHub, and Googlecode. Launchpad works very
similarly to the latter three. All the project hosting services have
excellent introductions available at their web sites, but the recipes
below are much shorter and aim at getting you started as quickly as
possible by concentrating on the most important need-to-know steps.
The Git tutorials we refer to later in this document contain more
detailed information and constitute of course very valuable readings
when you use version control systems every day. The point now is
to get started.


Appendix: Testing inline comments
---------------------------------

Projects that you want to share among several computers or project
workers are today most conveniently stored at some web site "in the
cloud" and updated through communication with that site. (**hpl 1**: not sure if in the cloud is understood by all.) I strongly
recommend you to use such sites for all serious programming and
scientific writing work - and all other important files.

The simplest services for hosting project files is Dropbox. (**mp 2**: Simply go to `<http://dropbox.com>`_ and watch the video. It explains
how files, like ``myfile.py``, perhaps containing much math, like
:math:`\partial u/\partial t`, are easily communicated between machines.) It
is very easy to get started with Dropbox, and it allows you to share
files among laptops and mobile units.

When several people may edit files simultaneously, it can be difficult
detect who did what when, roll back to previous versions, and to
manually merge the edits when these are incompatible. Then one needs
more sophisticated tools than Dropbox: project hosting services with
true version control systems.  (**hpl 3**: The following text aims at providing
you with the minimum information to started with such
systems. Numerous other tutorials contain more comprehensive material
and in-depth explanations of the concepts and tools.)

Appendix: Testing headings ending with ``verbatim inline``
----------------------------------------------------------

The point here is to test 1) ``verbatim`` code in headings, and 2)
ending a heading with verbatim code as this triggers a special
case in LaTeX.
