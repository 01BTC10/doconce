

% A Test Document
% Hans Petter Langtangen at Center for Biomedical Computing, Simula Research Laboratory and Department of Informatics, University of Oslo;  Kaare Dump at Segfault Inc, Cyberspace;  A. Dummy Author;  I. S. Overworked at Inst1 and Inst2, Somewhere and Third Inst, Elsewhere and Fourth Inst;  J. Doe
% Jul 3, 2012

The format of this document is
pandoc
*Abstract.* This is a document with many test constructions for doconce syntax.
It was used heavily for the development and kept for testing
numerous constructions, also special and less common cases.

And exactly for test purposes we have an extra line here, which
is part of the abstract.



Chapter 1
%%%%%%%%%

Section 0
=========

Section 1
=========

Just a little bit of text
and then a list:

  * item1

  * item2

  * item3 which continues
    on the next line to test that feature

  * and a sublist

    * with indented subitem1

    * and a subitem2


  * and perhaps an ordered sublist

   1. first item

   2. second item,
      continuing on a new line


Subsection 1
------------

More text, with a reference back to the section [Section 1](#n-1) and further
to the section [URLs](#s). 
Let's do some copying from files too. First from subroutine up to the very end,


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.Fortran}
      subroutine    test()
      integer i
      real*8 r
      r = 0
      do i = 1, i
         r = r + i
      end do
      return
C     END1

      program testme
      call test()
      return
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

and then just the subroutine,

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.Fortran}
      subroutine    test()
      integer i
      real*8 r
      r = 0
      do i = 1, i
         r = r + i
      end do
      return
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

and finally the complete file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.Fortran}
C     a comment

      subroutine    test()
      integer i
      real*8 r
      r = 0
      do i = 1, i
         r = r + i
      end do
      return
C     END1

      program testme
      call test()
      return
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Subsection 2
------------


Test of figures.

FIGURE:[../doc/manual/figs/streamtubes, width=200] Visualization of flow by streamtubes. {fig:impact}

Test of movies.


<embed src="../doc/manual/figs/mjolnir.mpeg" width=700 height=400 autoplay="false" loop="true"></embed>
<p>
<em> Mjolnir tsunami (by Sylfest Glimsdal).</em>
</p>




<embed src="../doc/manual/figs/wavepacket.mpeg" width=700 height=400 autoplay="false" loop="true"></embed>
<p>
<em></em>
</p>



<p><a href="wavepacket_0001.html">Movie of files <tt>../doc/manual/figs/wavepacket_*.png</tt></a>
<em> Movie based on collection of frames (here just a few frames compared with the full wavepacket.mpeg movie).</em></p>


MOVIE: http://www.youtube.com/watch?v=_O7iUiftbKU, width=420 height=315] Movies can be uploaded to YouTube and embedded as HTML or as a link.

Table Demo
----------

Let us take this table from the manual:



    time        velocity    acceleration  
------------  ------------  ------------  
0.0                 1.4186         -5.01  
2.0               1.376512        11.919  
4.0                 1.1E+1     14.717624  



The Doconce source code reads

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.Python}
  |--------------------------------|
  |time  | velocity | acceleration |
  |--l--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Here is yet another table to test that we can handle more than
one table:


    time        velocity    acceleration  
------------  ------------  ------------  
0.0           1.4186        -5.01         
1.0           1.376512      11.919        
3.0           1.1E+1        14.717624     


URLs
----

Here are some nice URLs, e.g., hpl's home page [hpl](http://folk.uio.no/hpl),
or the URL if desired, <http://folk.uio.no/hpl>.
Here is a plain file link <testdoc.do.txt>, or <testdoc.do.txt>,
or <testdoc.do.txt> or <testdoc.do.txt> or [a link
with newline](testdoc.do.txt). Can test spaces
with the link with word too: [hpl](http://folk.uio.no/hpl) or
[hpl](http://folk.uio.no/hpl). The old syntax must also be
tested: hpl's homepage (http://folk.uio.no/hpl). Now also `file:///`
works: [link to a file](file:///home/hpl/vc/doconce/trunk/test/tmp_HTML.html)
is fine to have.



LaTeX Mathematics
-----------------

Here is an equation without label using backslash-bracket environment:
$$ a = b + c $$
or with number and label, as in Equation (my:eq1), using the equation environment:
$$
\begin{equation}
{\partial u\over\partial t} = \nabla^2 u \label{my:eq1}
\end{equation}
$$
We can refer to this equation by Equation (my:eq1).

Here is a system without equation numbers, using the align-astrisk environment:
$$
\begin{align*}
\pmb{a} &= \pmb{q}\times\pmb{n} \\ 
b &= \nabla^2 u + \nabla^4 v
\end{align*}
$$


And here is a system of equations with labels in an align environment:
$$
\begin{align}
a &= q + 4 + 5+ 6 \label{eq1} \\ 
b &= \nabla^2 u + \nabla^4 x \label{eq2}
\end{align}
$$
We can refer to Equations (eq1)-(eq2).

Or with multline?
$$
\begin{multline}
a = b = q + \\ 
  f + \nabla\cdot\nabla u
\label{multiline:eq1}
\end{multline}
$$
Maybe split is better:
$$
\begin{equation}
\label{split:envir:eq}
\begin{split}
a = b = q &+ \\ 
  & f + \nabla\cdot\nabla u
\end{split}
\end{equation}
$$
And we can refer to the last equation by Equation (split:envir:eq).

What about gather?
$$
\begin{gather}
a = b \\ 
c = d + 7 + 9
\end{gather}
$$

And what about alignat?
$$
\begin{alignat}{2}
a &= q + 4 + 5+ 6\qquad & \mbox{for } q\geq 0 \label{eq1a} \\ 
b &= \nabla^2 u + \nabla^4 x & x\in\Omega \label{eq2a}
\end{alignat}
$$
Let us refer to Equations (eq1)-(eq2) again, and to the
alignat variant Equations (eq1a)-(eq2a), and to Equation (my:eq1).

Here is eqnarray in action:
$$
\begin{eqnarray}
{\partial u\over\partial t} &=& \nabla^2 u + f, \label{myeq1}\\ 
{\partial v\over\partial t} &=& \nabla\cdot(q(u)\nabla v) + g \label{myeq2}
\end{eqnarray}
$$

More mathematical typesetting is demonstrated in the exercises below.

Exercises
=========

Flip a Coin
-----------

Make a program that simulates flipping a coin $N$ times.
Print out "tail" or "head" for each flip and
let the program count the number of heads.

*Hint 1.* Use `r = random.random()` and define head as `r <= 0.5`.

*Hint 2.* Draw an integer among $\{1,2\}$ with
`r = random.randint(1,2)` and define head when `r` is 1.
*Filename*: `flip_coin.py`


Compute a Probability
---------------------

What is the probability of getting a number between 0.5 and 0.6 when
drawing uniformly distributed random numbers from the interval $[0,1)$?
To answer this question empirically, let a program
draw $N$ such random numbers using Python's standard `random` module,
count how many of them, $M$, that fall in the interval $(0.5,0.6)$, and
compute the probability as $M/N$. Run the program with the four
values $N=10^i$ for $i=1,2,3,6$.


Explore Distributions of Random Circles
---------------------------------------

The formula for a circle is given by
$$
\begin{align}
x &= x_0 + R\cos 2\pi t,\\ 
y &= y_0 + R\sin 2\pi t,
\end{align}
$$
where $R$ is the radius of the circle, $(x_0,y_0)$ is the
center point, and $t$ is a parameter in the unit interval $[0,1]$.
For any $t$, $(x,y)$ is a point on the circle.
The formula can be used to generate `n` points on a circle:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.Python}
import numpy as np

def circle(R, x0, y0, n=501):
    t = np.linspace(0, 1, n)
    x = x0 + R*np.cos(2*np.pi*t)
    y = y0 + R*np.sin(2*np.pi*t)
    return x, y
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



The goal of this project is to draw $N$ circles with random
center and radius. Plot each circle using the `circle` function
above. The following cases should be explored:

 * $R$ normally distributed and $(x_0,y_0)$ uniformly distributed

 * $R$ uniformly distributed and $(x_0,y_0)$ normally distributed

 * $R$ and $(x_0,y_0)$ normally distributed

*Hint.* Use the `numpy.random` module to draw the
$x_0$, $y_0$, and $R$ quantities.
*Filename*: `circles.pdf`
